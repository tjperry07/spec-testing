{"openapi":"3.0.0","info":{"version":"2.1","title":"Nylas API Template","license":{},"description":"This demonstrates how to document Nylas REST APIs."},"servers":[{"url":"https://api.nylas.com"}],"paths":{"/folders":{"get":{"summary":"Return all folders","tags":["Folders"],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Folder-Object"}},"examples":{"example":{"value":[{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Archive","id":"ajs4ef7xu74vns6o5ufsu69m7","name":"archive","object":"folder"},{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Conversation History","id":"etmvbqwqo64vlm73qvyfj2tet","name":null,"object":"folder"},{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Deleted Items","id":"blrfzbz4r066ip8x1bh8k8g1y","name":"trash","object":"folder"},{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Drafts","id":"a6vnuwv9gjj1xidxkhyzxeke1","name":"drafts","object":"folder"},{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Inbox","id":"b8un1ec0syrv94153fg3p61ci","name":"inbox","object":"folder"},{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Junk Email","id":"8tqebvw8t0aky7f2or1oagwt8","name":"spam","object":"folder"},{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Sent Items","id":"clzqp0nsim0138aohwzha34vk","name":"sent","object":"folder"}]}}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error-400"},"examples":{"example-1":{"value":{"message":"Error Message","type":"Error Type"}}}}}}},"operationId":"get-folders","description":"Returns all folders.","security":[{"ACCESS_TOKEN":[]}],"parameters":[{"schema":{"type":"string"},"in":"query","name":"in","description":"Use the `in` filter with`folder_id`, `name`, `display_name`."}],"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.nylas.com/folders',\n  qs: {in: 'SOME_STRING_VALUE'},\n  headers: {authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.nylas.com/folders?in=SOME_STRING_VALUE' \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Shell + Httpie","source":"http GET 'https://api.nylas.com/folders?in=SOME_STRING_VALUE' \\\n  authorization:'Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.nylas.com\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/folders?in=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.nylas.com/folders?in=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.nylas.com/folders');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'in' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.nylas.com/folders');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'in' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]},"post":{"summary":"Create a folder","tags":["Folders"],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Folder-Object"},"examples":{"example-1":{"value":{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Archive","id":"ajs4ef7xu74vns6o5ufsu69m7","name":"archive","object":"folder"}}}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error-400"},"examples":{"example-1":{"value":{"message":"Error Message","type":"Error Type"}}}}}}},"operationId":"post-folders","description":"Creates a new folder.","security":[{"ACCESS_TOKEN":[]}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Folder-Create"},"examples":{"example-1":{"value":{"display_name":"My Renamed Folder"}}}}}},"parameters":[],"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.nylas.com/folders',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {display_name: 'My Renamed Folder'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.nylas.com/folders \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"display_name\":\"My Renamed Folder\"}'"},{"lang":"Shell + Httpie","source":"echo '{\"display_name\":\"My Renamed Folder\"}' |  \\\n  http POST https://api.nylas.com/folders \\\n  authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.nylas.com\")\n\npayload = \"{\\\"display_name\\\":\\\"My Renamed Folder\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/folders\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.nylas.com/folders\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"display_name\\\":\\\"My Renamed Folder\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.nylas.com/folders');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"display_name\":\"My Renamed Folder\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"display_name\":\"My Renamed Folder\"}');\n\n$request->setRequestUrl('https://api.nylas.com/folders');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]}},"/folders/{id}":{"parameters":[{"schema":{"type":"string"},"name":"id","in":"path","required":true,"description":"The ID of the folder."}],"get":{"summary":"Return a folder","tags":["Folders"],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Folder-Object"},"examples":{"example-1":{"value":{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Archive","id":"ajs4ef7xu74vns6o5ufsu69m7","name":"archive","object":"folder"}}}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error-400"}}}}},"operationId":"get-folders-id","description":"Returns a folder by ID.","security":[{"ACCESS_TOKEN":[]}],"parameters":[],"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.nylas.com/folders/%7Bid%7D',\n  headers: {authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.nylas.com/folders/%7Bid%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Shell + Httpie","source":"http GET https://api.nylas.com/folders/%7Bid%7D \\\n  authorization:'Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.nylas.com\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/folders/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.nylas.com/folders/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.nylas.com/folders/%7Bid%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.nylas.com/folders/%7Bid%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]},"put":{"summary":"Update a folder","tags":["Folders"],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Folder-Object"},"examples":{"example-1":{"value":{"account_id":"79xcak1h10r1tmm5ogavx28lb","display_name":"Archive","id":"ajs4ef7xu74vns6o5ufsu69m7","name":"archive","object":"folder"}}}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error-400"},"examples":{"example-1":{"value":{"message":"Error Message","type":"Error Type"}}}}}}},"operationId":"put-folders-id","description":"Updates a folder by ID.","parameters":[],"security":[{"ACCESS_TOKEN":[]}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Folder-Update"},"examples":{"example-1":{"value":{"display_name":"My Renamed Folder","name":"renamed-folder"}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.nylas.com/folders/%7Bid%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {display_name: 'My Renamed Folder', name: 'renamed-folder'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.nylas.com/folders/%7Bid%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"display_name\":\"My Renamed Folder\",\"name\":\"renamed-folder\"}'"},{"lang":"Shell + Httpie","source":"echo '{\"display_name\":\"My Renamed Folder\",\"name\":\"renamed-folder\"}' |  \\\n  http PUT https://api.nylas.com/folders/%7Bid%7D \\\n  authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.nylas.com\")\n\npayload = \"{\\\"display_name\\\":\\\"My Renamed Folder\\\",\\\"name\\\":\\\"renamed-folder\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/folders/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.nylas.com/folders/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"display_name\\\":\\\"My Renamed Folder\\\",\\\"name\\\":\\\"renamed-folder\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.nylas.com/folders/%7Bid%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"display_name\":\"My Renamed Folder\",\"name\":\"renamed-folder\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"display_name\":\"My Renamed Folder\",\"name\":\"renamed-folder\"}');\n\n$request->setRequestUrl('https://api.nylas.com/folders/%7Bid%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]},"delete":{"summary":"Delete a folder","tags":["Folders"],"responses":{"200":{"description":"OK"},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error-400"},"examples":{"example-1":{"value":{"message":"Error Message","type":"Error Type"}}}}}}},"operationId":"delete-folders-id","description":"Deletes a folder.","security":[{"ACCESS_TOKEN":[]}],"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.nylas.com/folders/%7Bid%7D',\n  headers: {authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.nylas.com/folders/%7Bid%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Shell + Httpie","source":"http DELETE https://api.nylas.com/folders/%7Bid%7D \\\n  authorization:'Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.nylas.com\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/folders/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.nylas.com/folders/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.nylas.com/folders/%7Bid%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.nylas.com/folders/%7Bid%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]}}},"components":{"schemas":{"Folder-Object":{"title":"Folder-Object","type":"object","x-tags":["Folders"],"x-examples":{},"description":"","properties":{"id":{"type":"string","example":"blrfzbz4r066ip8x1bh8k8g1y","description":"Globally unique object identifier."},"object":{"type":"string","example":"folder","description":"A string describing the type of object (value is \"folder\")."},"account_id":{"type":"string","example":"79xcak1h10r1tmm5ogavx28lb","description":"Reference to parent account object."},"name":{"type":"string","example":"inbox","description":"Standard categories type, based on [RFC-6154](http://tools.ietf.org/html/rfc6154).\nCan be one of the following:\n* inbox\n* all\n* trash\n* archive\n* drafts\n* sent\n* spam\n* important\n* null (regular user-created folder)"},"display_name":{"type":"string","example":"Inbox","description":"Localized name of folder, matching what is presented in their other mail apps. If you are displaying folders, use this instead of `name`."}}},"Folder-Create":{"title":"Folder-Create","type":"object","properties":{"display_name":{"type":"string","description":"The human-readable name for the new folder.","example":"My Renamed Folder"}}},"Folder-Update":{"title":"Folder-Update","type":"object","properties":{"display_name":{"type":"string","description":"The human-readable name for the new folder.","example":"My Renamed Folder"},"name":{"type":"string","description":"Specify `sent` to update this folder as the primary sent folder. This feature is supported for custom IMAP accounts only.","example":"renamed-folder"}}},"Error-400":{"title":"Error-400","type":"object","x-examples":{},"properties":{"message":{"type":"string","description":"Error Message","example":"Error Message"},"type":{"type":"string","description":"Error Type","example":"Error Type"}}}},"securitySchemes":{"BASIC_AUTH":{"type":"http","scheme":"basic"},"ACCESS_TOKEN":{"type":"http","scheme":"bearer"}},"headers":{"Content-Type":{"in":"header"}}},"tags":[{"name":"Folders","description":"Folders behave like normal IMAP or filesystem folders. A Message can only       exist within one folder at a time, but a Thread with many messages may    span several folders.\\n\\nFolders are only supported on accounts for which   `organization_unit` is folder. You can check if an account supports labels by looking at the `organization_unit` property on the Account object.\\n\\n## Nested Folders\\nIMAP has very limited support for nested folders. It encodes a folder's path in its name. For example, the folder Accounting/Taxes will actually be named Accounting.Taxes or even INBOX.Accounting.Taxes depending on your IMAP server. To complicate things, different IMAP servers use different path separators. For example, Taxes.Accounting on server A may be Taxes\\\\Accounting on server B.\\n\\nThe Nylas API handles nested IMAP folders transparently. Creating a Taxes/Invoices folder using the API will create a folder with the right path separators.For example, depending on your server: INBOX.Taxes.Invoices or Taxes/Invoices."}]}
