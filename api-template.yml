openapi: 3.0.0
info:
  version: '2.1'
  title: Nylas API Template
  license: {}
  description: This demonstrates how to document Nylas REST APIs.
servers:
  - url: 'https://api.nylas.com'
paths:
  /folders:
    get:
      summary: Return all folders
      tags:
        - Folders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder-Object'
              examples:
                example:
                  value:
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Archive
                      id: ajs4ef7xu74vns6o5ufsu69m7
                      name: archive
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Conversation History
                      id: etmvbqwqo64vlm73qvyfj2tet
                      name: null
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Deleted Items
                      id: blrfzbz4r066ip8x1bh8k8g1y
                      name: trash
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Drafts
                      id: a6vnuwv9gjj1xidxkhyzxeke1
                      name: drafts
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Inbox
                      id: b8un1ec0syrv94153fg3p61ci
                      name: inbox
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Junk Email
                      id: 8tqebvw8t0aky7f2or1oagwt8
                      name: spam
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Sent Items
                      id: clzqp0nsim0138aohwzha34vk
                      name: sent
                      object: folder
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
      operationId: get-folders
      description: Returns all folders.
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
          in: query
          name: in
          description: 'Use the `in` filter with`folder_id`, `name`, `display_name`.'
      x-code-samples:
        - lang: HTTP
          source: |
            GET /folders HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVUWjZ2****
            cache-control: no-cache
        - lang: cURL
          source: |-
            # Return all folders found in the user's inbox
            curl -X GET 'https://api.nylas.com/folders' \
            -H 'Authorization: Bearer ACCESS_TOKEN'

            # Use offset, and limit to paginate the results
            curl -X GET 'https://api.nylas.com/folders?limit=2&offset=4' \
            -H 'Authorization: Bearer ACCESS_TOKEN
        - lang: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return all folders found in the user's inbox
            nylas.folders.all()

            # Use offset, and limit to paginate the results
            nylas.folders.where(limit=2, offset=4)

            # Return the first folder
            folder = nylas.folders.first()

            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id'
        - lang: Ruby SDK
          source: |-
            # Return all folders found in the user's inbox
            nylas.folders

            # Use offset, and limit to paginate the results
            nylas.folders.limit(2).offset(4)

            # Return the last folder
            nylas.folders.last

            # Return the first folder
            folder = nylas.folders.first

            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: Node.js SDK
          source: |-
            // Return all folders found in the user's inbox
            nylas.folders.list().then(folders => console.log(folders));

            // Use offset, and limit to paginate the results
            nylas.folders.list({limit: 2, offset: 4}).then(folders => console.log(folders))

            // Return the first folder
            nylas.folders.first().then(folder => console.log(folder));

            // The following attributes are available for the folder object
            folder.id
            folder.object
            folder.accountId
            folder.name
            folder.displayName
        - lang: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.FolderQuery;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void getFoldersExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();
                    
                    // Return all folders found in the user's inbox 
                    folders.list();
                    
                    // Use offset, and limit to control pagination
                    folders.list(new FolderQuery().limit(2).offset(4));
                    
                    // Return the first folder
                    Folder folder = folders.list(new FolderQuery().limit(1)).get(0);
                    
                    // The following attributes are available for the folder object
                    folder.getDisplayName();
                    folder.getName();
                    folder.getObject();
                    folder.getId();
                    folder.getAccountId();
                    }
            }    
    post:
      summary: Create a folder
      tags:
        - Folders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder-Object'
              examples:
                example-1:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
      operationId: post-folders
      description: Creates a new folder.
      security:
        - ACCESS_TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder-Create'
            examples:
              example-1:
                value:
                  display_name: My Renamed Folder
      parameters: []
  '/folders/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the folder.
    get:
      summary: Return a folder
      tags:
        - Folders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder-Object'
              examples:
                example-1:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-folders-id
      description: Returns a folder by ID.
      security:
        - ACCESS_TOKEN: []
      parameters: []
    put:
      summary: Update a folder
      tags:
        - Folders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder-Object'
              examples:
                example-1:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
      operationId: put-folders-id
      description: Updates a folder by ID.
      parameters: []
      security:
        - ACCESS_TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder-Update'
            examples:
              example-1:
                value:
                  display_name: My Renamed Folder
                  name: renamed-folder
    delete:
      summary: Delete a folder
      tags:
        - Folders
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
      operationId: delete-folders-id
      description: Deletes a folder.
      security:
        - ACCESS_TOKEN: []
components:
  schemas:
    Folder-Object:
      title: Folder-Object
      type: object
      x-tags:
        - Folders
      x-examples: {}
      description: ''
      properties:
        id:
          type: string
          example: blrfzbz4r066ip8x1bh8k8g1y
          description: Globally unique object identifier.
        object:
          type: string
          example: folder
          description: A string describing the type of object (value is "folder").
        account_id:
          type: string
          example: 79xcak1h10r1tmm5ogavx28lb
          description: Reference to parent account object.
        name:
          type: string
          example: inbox
          description: |-
            Standard categories type, based on [RFC-6154](http://tools.ietf.org/html/rfc6154).
            Can be one of the following:
            * inbox
            * all
            * trash
            * archive
            * drafts
            * sent
            * spam
            * important
            * null (regular user-created folder)
        display_name:
          type: string
          example: Inbox
          description: 'Localized name of folder, matching what is presented in their other mail apps. If you are displaying folders, use this instead of `name`.'
    Folder-Create:
      title: Folder-Create
      type: object
      properties:
        display_name:
          type: string
          description: The human-readable name for the new folder.
          example: My Renamed Folder
    Folder-Update:
      title: Folder-Update
      type: object
      properties:
        display_name:
          type: string
          description: The human-readable name for the new folder.
          example: My Renamed Folder
        name:
          type: string
          description: Specify `sent` to update this folder as the primary sent folder. This feature is supported for custom IMAP accounts only.
          example: renamed-folder
    Error-400:
      title: Error-400
      type: object
      x-examples: {}
      properties:
        message:
          type: string
          description: Error Message
          example: Error Message
        type:
          type: string
          description: Error Type
          example: Error Type
  securitySchemes:
    BASIC_AUTH:
      type: http
      scheme: basic
    ACCESS_TOKEN:
      type: http
      scheme: bearer
  headers:
    Content-Type:
      in: header
tags:
  - name: Folders
    description: 'Folders behave like normal IMAP or filesystem folders. A Message can only       exist within one folder at a time, but a Thread with many messages may    span several folders.\n\nFolders are only supported on accounts for which   `organization_unit` is folder. You can check if an account supports labels by looking at the `organization_unit` property on the Account object.\n\n## Nested Folders\nIMAP has very limited support for nested folders. It encodes a folder''s path in its name. For example, the folder Accounting/Taxes will actually be named Accounting.Taxes or even INBOX.Accounting.Taxes depending on your IMAP server. To complicate things, different IMAP servers use different path separators. For example, Taxes.Accounting on server A may be Taxes\\Accounting on server B.\n\nThe Nylas API handles nested IMAP folders transparently. Creating a Taxes/Invoices folder using the API will create a folder with the right path separators.For example, depending on your server: INBOX.Taxes.Invoices or Taxes/Invoices.'
