openapi: 3.0.0
info:
  title: Nylas API Template
  version: '2.1'
  description: This demonstrates how to document Nylas REST APIs.
  contact:
    url: 'http://support.nylas.com/'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  x-logo:
    url: ''
servers:
  - url: 'https://api.nylas.com'
paths:
  /folders:
    get:
      tags:
        - Folders
      parameters:
        - name: in
          description: 'Use the `in` filter with`folder_id`, `name`, `display_name`.'
          schema:
            type: string
          in: query
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder-Object'
              examples:
                example:
                  value:
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Archive
                      id: ajs4ef7xu74vns6o5ufsu69m7
                      name: archive
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Conversation History
                      id: etmvbqwqo64vlm73qvyfj2tet
                      name: string
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Deleted Items
                      id: blrfzbz4r066ip8x1bh8k8g1y
                      name: trash
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Drafts
                      id: a6vnuwv9gjj1xidxkhyzxeke1
                      name: drafts
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Inbox
                      id: b8un1ec0syrv94153fg3p61ci
                      name: inbox
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Junk Email
                      id: 8tqebvw8t0aky7f2or1oagwt8
                      name: spam
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Sent Items
                      id: clzqp0nsim0138aohwzha34vk
                      name: sent
                      object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: get-folders
      summary: Return all folders
      description: Returns all folders.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            GET /folders HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVUWjZ2****
            cache-control: no-cache
        - lang: bash
          label: cURL
          source: |-
            # Return all folders found in the user's inbox
            curl -X GET 'https://api.nylas.com/folders' \
            -H 'Authorization: Bearer ACCESS_TOKEN'

            # Use offset, and limit to paginate the results
            curl -X GET 'https://api.nylas.com/folders?limit=2&offset=4' \
            -H 'Authorization: Bearer ACCESS_TOKEN
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return all folders found in the user's inbox
            nylas.folders.all()

            # Use offset, and limit to paginate the results
            nylas.folders.where(limit=2, offset=4)

            # Return the first folder
            folder = nylas.folders.first()

            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id'
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Return all folders found in the user's inbox
            nylas.folders

            # Use offset, and limit to paginate the results
            nylas.folders.limit(2).offset(4)

            # Return the last folder
            nylas.folders.last

            # Return the first folder
            folder = nylas.folders.first

            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: js
          label: Node.js SDK
          source: |-
            // Return all folders found in the user's inbox
            nylas.folders.list().then(folders => console.log(folders));

            // Use offset, and limit to paginate the results
            nylas.folders.list({limit: 2, offset: 4}).then(folders => console.log(folders))

            // Return the first folder
            nylas.folders.first().then(folder => console.log(folder));

            // The following attributes are available for the folder object
            folder.id
            folder.object
            folder.accountId
            folder.name
            folder.displayName
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.FolderQuery;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void getFoldersExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();
                    
                    // Return all folders found in the user's inbox 
                    folders.list();
                    
                    // Use offset, and limit to control pagination
                    folders.list(new FolderQuery().limit(2).offset(4));
                    
                    // Return the first folder
                    Folder folder = folders.list(new FolderQuery().limit(1)).get(0);
                    
                    // The following attributes are available for the folder object
                    folder.getDisplayName();
                    folder.getName();
                    folder.getObject();
                    folder.getId();
                    folder.getAccountId();
                    }
            }    
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder-Create'
            examples:
              example-1:
                value:
                  display_name: My Renamed Folder
      tags:
        - Folders
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder-Object'
              examples:
                example-1:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: post-folders
      summary: Create a folder
      description: Creates a new folder.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            POST /folders HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVUW****
            cache-control: no-cache
            {
                "display_name": "My New Folder"
            }
        - lang: bash
          label: cURL
          source: |-
            # Create a new folder
            curl -X POST 'https://api.nylas.com/folders' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "display_name": "My New Folder"
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Create a new folder
            folder = nylas.folders.create()

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save the folder to Nylas and the 3rd party provider
            # Note: folder.display_name must be assigned a value before you can save the folder
            folder.save()
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Create a new folder
            folder = nylas.folders.create(display_name: 'My Custom Folder')

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save the folder to Nylas and the 3rd party provider
            # Note: folder.display_name must be assigned a value before you can save the folder
            folder.save
        - lang: js
          label: Node.js SDK
          source: |-
            // Create a new folder
            let folder = nylas.folders.build();

            // The following attributes can be set for a new folder object
            folder.displayName = 'My Custom Folder';

            // Save the folder to Nylas and the 3rd party provider
            // Note: folder.displayName must be assigned a value before you can save the folder
            folder.save();
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void postFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();
                    
                    // Create a new folder with the provided display name
                    Folder folder = folders.create("My Custom Folder");
                    }
            }
  '/folders/{id}':
    get:
      tags:
        - Folders
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder-Object'
              examples:
                example-1:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: get-folders-id
      summary: Return a folder
      description: Returns a folder by ID.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            GET /folders/4zv7p**** HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVUWjZ2****
            cache-control: no-cache
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/folders/{folder_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Replace {id} with the appropriate folder id
            folder = nylas.folders.get('{id}')


            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} with the appropriate folder id
            folder = nylas.folders.find('{id}')


            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: js
          label: Node.js SDK
          source: |-
            # Replace {id} with the appropriate folder id
            nylas.folders.find('{id}').then(folder => console.log(folder));


            # The following attributes are available for the folder object
            folder.id
            folder.object
            folder.accountId
            folder.name
            folder.displayName
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void getFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();
                    
                    // Replace {id} with the appropriate folder id
                    Folder folder = folders.get("{id}");

                    // The following attributes are available for the folder object
                    folder.getDisplayName();
                    folder.getName();
                    folder.getId();
                    folder.getAccountId();
                    folder.getObject();
                    }
            }
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder-Update'
            examples:
              example-1:
                value:
                  display_name: My Renamed Folder
                  name: renamed-folder
      tags:
        - Folders
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder-Object'
              examples:
                example-1:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: put-folders-id
      summary: Update a folder
      description: Updates a folder by ID.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            PUT /folders/51si**** HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVU****
            Accept: */*
            Cache-Control: no-cache
            Host: api.nylas.com
            accept-encoding: gzip, deflate
            content-length: 43
            Connection: keep-alive
            cache-control: no-cache

            {
                "display_name": "My Renamed Folder"
            }
        - lang: bash
          label: cURL
          source: |-
            # Replace {id} to get a specific folder
            curl -X PUT 'https://api.nylas.com/folders/{folder_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "display_name": "My New Folder Renamed"
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Replace {id} to get a specific folder
            folder = nylas.folders.get('{id}')

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save folder changes to Nylas and the 3rd party provider
            # display_name must be set before calling this function
            folder.save()
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} to get a specific folder
            folder = nylas.folders.find('{id}')

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save folder changes to Nylas and the 3rd party provider
            folder.save
        - lang: js
          label: Node.js SDK
          source: |-
            // Replace {id} to get a specific folder
            let folder;
            nylas.folders.find('{id}').then(res => folder = res);

            // The following attributes can be set for a new folder object
            folder.displayName = 'My Custom Folder';

            // Save folder changes to Nylas and the 3rd party provider
            folder.save();
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void putFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();

                    // Update a folder's display name by passing the folder ID and the new name.
                    folders.setDisplayName("{folder_id}", "My Custom Label");
                    }
            } 
    delete:
      tags:
        - Folders
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: delete-folders-id
      summary: Delete a folder
      description: Deletes a folder.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            DELETE /folders/51si**** HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            cache-control: no-cache
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE 'https://api.nylas.com/folders/{folder_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' 
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Delete folders by specifying the appropriate id
            nylas.folders.delete('{id}')
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} to get a specific folder
            folder = nylas.folders.find('{id}')

            # Delete folder
            folder.destroy
        - lang: js
          label: Node.js SDK
          source: |-
            // Delete folders by specifying the appropriate id
            nylas.folders.delete('{id}');
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void deleteFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();

                    // Delete folders by specifying the appropriate id
                    folders.delete("{folder_id}");
                    }
            } 
    parameters:
      - name: id
        description: The ID of the folder.
        schema:
          type: string
        in: path
        required: true
  /oauth/authorize:
    get:
      tags:
        - Hosted Authentication
      parameters:
        - name: client_id
          description: Your Nylas application's client ID.
          schema:
            type: string
          in: query
          required: true
        - name: redirect_uri
          description: The URI to which the user will be redirected once authentication completes. This must match a URI registered in the developer dashboard.
          schema:
            type: string
          in: query
          required: true
        - name: response_type
          description: '`code` for server side, `token` for client side.'
          schema:
            type: string
          in: query
          required: true
        - name: scopes
          description: Any combination of supported authentication scopes.
          schema:
            type: string
          in: query
          required: true
        - name: login_hint
          description: 'The user’s email address, if known. If you don''t supply a `login_hint`, the Nylas OAuth flow will prompt the user for an email address to authenticate.'
          schema:
            type: string
          in: query
        - name: state
          description: 'An optional arbitrary string that is returned as a URL parameter in your redirect URI. You can pass a value here to keep track of a specific user’s authentication flow. This may also be used to protect against [CSRF attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The maximum length of this string is 255 characters.'
          schema:
            type: string
          in: query
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
              examples:
                example-1:
                  value:
                    code: string
          description: OK
        '400':
          content:
            text/html:
              schema:
                type: object
              examples:
                example-1:
                  value: "<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=windows-1252\">\n        <meta name=\"viewport\" content=\"width=device-width, user-scalable=no\">\n        <title>Sign in to your email</title>\n        <link rel=\"stylesheet\" href=\"/static/fonts/Avenir.css\">\n        <link rel=\"stylesheet\" href=\"/static/css/oauth.css\">\n        <link rel=\"stylesheet\" href=\"//fonts.googleapis.com/css?family=Open+Sans:300,400,600\" type=\"text/css\">\n\n\n    </head>\n    <body>\n        <div id=\"container\">\n            <form action=\"#\" method=\"post\">\n                <div id=\"white-box\">\n                    <div id=\"user_action\" style=\"padding:30px;\">\n                        <h2>Error</h2>\n                        <p class=\"alert\">\n\t\t\t\tSorry, an error occurred :(\n\t\t\t\t</p>\n                        <p class=\"error-display\">Status 400:</p>\n                        <p class=\"error-display\">Error messages goes here</p>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</body>\n</html>"
          description: Bad Request
      security:
        - BASIC_AUTH: []
      operationId: get-oauth-authorize
      summary: Authenticate User
      description: Authenticate user.
  /oauth/token:
    post:
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              required:
                - client_id
                - client_secret
                - grant_type
                - code
              type: object
              properties:
                client_id:
                  description: Your Nylas application's client ID.
                  type: string
                client_secret:
                  description: Your Nylas Developer App client secret.
                  type: string
                grant_type:
                  description: Set to `authorization_code`.
                  type: string
                code:
                  description: The authorization code returned from `/oauth/authorize`.
                  type: string
      tags:
        - Hosted Authentication
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: ./api-template.yml#/components/schemas/Error-400
          description: Bad Request
      security:
        - BASIC_AUTH: []
      operationId: post-oauth-token
      summary: Send Access Token
      description: Send access token.
  /oauth/revoke:
    post:
      tags:
        - Hosted Authentication
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: ./api-template.yml#/components/schemas/Error-400
          description: Bad Request
      security:
        - BASIC_AUTH: []
      operationId: post-oauth-revoke
      summary: Revoke Access Tokens
      description: |-
        Revoke access tokens.

        Include the to-be-revoked access token as the HTTP Basic Auth username.

        A 200 status code response with a body of `{ "success": True }` signifies that the token has been successfully revoked and can no longer be used.

        If needed, you can also revoke all active access tokens by using the Account Management endpoints.
  /connect/authorize:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Native-Auth-Post'
      tags:
        - Native Authentication
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
          required: true
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
              examples:
                example-1:
                  value:
                    code: one-time-use-code
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: object
              examples:
                example-1:
                  value:
                    message: Please include the missing fields
                    type: auth_error
                    missing_fields:
                      - provider
                    error: Missing fields.
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                type: object
              examples:
                example-1:
                  value:
                    message: Please include the missing fields
                    type: auth_error
                    missing_fields:
                      - provider
                    error: Missing fields.
          description: Forbidden
      operationId: post-connect-authorize
      summary: Send Authorization
      description: |
        This endpoint is where your application sends mailbox credentials to verify they are correct. This begins the connection process.

        A successful authentication will return your application a JSON encoded body with a single code parameter. In the next step, your server backend should exchange this code for an access token, which can then be used to make API requests.

        **Notice about POSTing to /connect/authorize**

        We recommend that you POST these values directly to api.nylas.com using AJAX from your web application. By sending these directly, your app will never be required to manipulate or store passwords for a user's mailbox. (You don't even want to take the chance of logging these by accident!)
  /account:
    get:
      tags:
        - Apps and Accounts
        - Accounts
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
          required: true
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account-Get'
              examples:
                example-1:
                  value:
                    id: awa6ltos76vz5hvphkp8k17nt
                    object: account
                    account_id: awa6ltos76vz5hvphkp8k17nt
                    name: Dorothy Vaughan
                    provider: gmail
                    organization_unit: label
                    sync_state: running
                    linked_at: 1470231381
                    email_address: dorothy@spacetech.com
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: get-account
      summary: Return an Account
      description: Returns account details.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            GET /account HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Bearer ACCESS_TOKEN
            cache-control: no-cache
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/account \
              -H 'Authorization: Bearer ACCESS_TOKEN' \
              -H 'Content-Type: application/json' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: |-
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            account = nylas.account

            # The following attributes are available for the Account object
            account.id
            account.account_id
            account.object
            account.name
            account.email_address
            account.provider
            account.organization_unit
            account.sync_state
            account.linked_at
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas = Nylas::API.new(
                app_id: APP_ID,
                app_secret: APP_SECRET,
                access_token: ACCESS_TOKEN
            )

            account = nylas.current_account

            # The following attributes are available for the Account object
            account.id
            account.account_id
            account.object
            account.name
            account.email_address
            account.provider
            account.organization_unit
            account.sync_state
            account.linked_at
        - lang: js
          label: Node.js SDK
          source: |-
            nylas.account.get().then(account => console.log(account));

            // The following attributes are available for the Account object
            account.id
            account.accountId
            account.object
            account.name
            account.emailAddress
            account.provider
            account.organizationUnit
            account.syncState
            account.linkedAt
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.AccountDetail;
            import com.nylas.NylasClient;

            public class DocExamples {
                public static void getAccountExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    AccountDetail account = nylas.account("{ACCESS_TOKEN}").fetchAccountByAccessToken();
                    
                    // The following attributes are available for the account object
                    account.getId();
                    account.getName();
                    account.getEmailAddress();
                    account.getProvider();
                    account.getOrganizationUnit();
                    account.getSyncState();
                    account.getLinkedAt();
                    }
            }
components:
  schemas:
    Folder-Object:
      title: Folder-Object
      description: ''
      type: object
      properties:
        id:
          description: Globally unique object identifier.
          type: string
          example: blrfzbz4r066ip8x1bh8k8g1y
        object:
          description: A string describing the type of object (value is "folder").
          type: string
          example: folder
        account_id:
          description: Reference to parent account object.
          type: string
          example: 79xcak1h10r1tmm5ogavx28lb
        name:
          description: |-
            Standard categories type, based on [RFC-6154](http://tools.ietf.org/html/rfc6154).
            Can be one of the following:
            * inbox
            * all
            * trash
            * archive
            * drafts
            * sent
            * spam
            * important
            * null (regular user-created folder)
          type: string
          example: inbox
        display_name:
          description: 'Localized name of folder, matching what is presented in their other mail apps. If you are displaying folders, use this instead of `name`.'
          type: string
          example: Inbox
      x-tags:
        - Folders
      x-examples: {}
    Folder-Create:
      title: Folder-Create
      type: object
      properties:
        display_name:
          description: The human-readable name for the new folder.
          type: string
          example: My Renamed Folder
    Folder-Update:
      title: Folder-Update
      type: object
      properties:
        display_name:
          description: The human-readable name for the new folder.
          type: string
          example: My Renamed Folder
        name:
          description: Specify `sent` to update this folder as the primary sent folder. This feature is supported for custom IMAP accounts only.
          type: string
          example: renamed-folder
    Error-400:
      title: Error-400
      type: object
      properties:
        message:
          description: Error Message
          type: string
          example: Error Message
        type:
          description: Error Type
          type: string
          example: Error Type
      x-examples: {}
    Native-Auth-Post:
      title: Native-Auth-Post
      required:
        - client_id
        - name
        - email_address
        - provider
      type: object
      properties:
        client_id:
          description: Your client ID from the Nylas Developer console.
          type: string
        name:
          description: The full name of the user (e.g. “John Snow”).
          type: string
        email_address:
          description: The user’s email address.
          type: string
        provider:
          description: 'The format of the settings objec is dependent upon this field. If your provider isn''t listed, use the generic settings.'
          enum:
            - gmail
            - yahoo
            - exchange
            - outlook
            - imap
            - icloud
            - hotmail
            - aol
            - office365
          type: string
        settings:
          oneOf:
            - description: Google Settings
              properties:
                google_client_id:
                  type: string
                google_client_secret:
                  type: string
                google_refresh_token:
                  type: string
            - description: Exchange Settings
              properties:
                username:
                  type: string
                password:
                  type: string
                exchange_server_host:
                  type: string
            - description: Known IMAP
              properties:
                pasword:
                  type: string
            - description: Generic IMAP
              properties:
                imap_host:
                  type: string
                imap_port:
                  type: string
                imap_username:
                  type: string
                imap_password:
                  type: string
                smtp_host:
                  type: string
                smtp_port:
                  type: string
                smtp_username:
                  type: string
                smtp_password:
                  type: string
                ssl_required:
                  type: string
            - description: Office 365
              properties:
                microsoft_client_id:
                  type: string
                microsoft_client_secret:
                  type: string
                microsoft_refresh_token:
                  type: string
                redirect_uri:
                  description: Redirect URI that the was originally used to get the refresh token.
                  type: string
            - description: Office 365 Service Accounts OAuth
              properties:
                microsoft_client_id:
                  type: string
                microsoft_client_secret:
                  type: string
                microsoft_refresh_token:
                  type: string
                redirect_uri:
                  description: Redirect URI that the was originally used to get the refresh token.
                  type: string
                service_accounts:
                  default: 'true'
                  type: string
            - description: Office 365 Service Account Password Authentication
              properties:
                username:
                  type: string
                password:
                  type: string
                service_account:
                  default: 'true'
                  type: string
            - description: G Suite Service Accounts
              properties:
                service_account_json:
                  type: object
                  properties:
                    type:
                      default: service_account
                      type: string
                    project_id:
                      type: string
                      example: metal-figure-239116
                    private_key_id:
                      type: string
                      example: 68ac9191dd3468915b4e52e0be785ba7c6873b14
                    private_key:
                      type: string
                      example: '-----BEGIN PRIVATE KEY-----\nMI...J7tF8=\n-----END PRIVATE KEY-----\n'
                    client_email:
                      type: string
                      example: test-service-account@metal-figure-239116.iam.gserviceaccount.com
                    client_id:
                      type: string
                      example: '105691998485416876281'
                    auth_uri:
                      type: string
                      example: 'https://accounts.google.com/o/oauth2/auth'
                    token_uri:
                      type: string
                      example: 'https://oauth2.googleapis.com/token'
                    auth_provider_x509_cert_url:
                      type: string
                      example: 'https://www.googleapis.com/oauth2/v1/cert'
                    client_x509_cert_url:
                      type: string
                      example: 'https://www.googleapis.com/robot/v1/metadata/x509/test-service-account%40metal-figure-239116.iam.gserviceaccount.com'
          type: object
        scopes:
          description: Any combination of supported authentication scopes. Service accounts only support calendar scopes.
          type: string
    Account-Get:
      title: Account-Get
      type: object
      properties:
        id:
          description: A globally unique object identifier.
          type: string
          example: awa6ltos76vz5hvphkp8k17nt
        object:
          description: A string describing the type of object.
          default: account
          type: string
          example: account
        account_id:
          description: ID of the account.
          type: string
          example: awa6ltos76vz5hvphkp8k17nt
        name:
          description: 'The full name of the user, used as the default from name when sending mail.'
          type: string
          example: Dorothy Vaughan
        provider:
          description: 'Specifies the provider that backs the account. See [Supported Providers](#link) for a full list.'
          type: string
          example: gmail
        organization_unit:
          description: 'Specify either label or folder, depending on the provider capabilities. See [Label vs. Folder](#link) for more.'
          type: string
          example: label
        sync_state:
          description: 'The syncing status of the account. See the [Sync Status](#link) documentation for possible values.'
          type: string
          example: running
        linked_at:
          format: int32
          description: A Unix timestamp indicating when this account was originally connected to Nylas.
          type: integer
          example: 1470231381
        email_address:
          description: 'The canonical email address of the account. For Gmail accounts, this removes periods and plus suffixes.'
          type: string
          example: dorothy@spacetech.com
  securitySchemes:
    BASIC_AUTH:
      scheme: basic
      type: http
    ACCESS_TOKEN:
      scheme: bearer
      type: http
  responses: {}
  parameters: {}
tags:
  - name: Folders
    description: |-
      Folders behave like normal IMAP or filesystem folders. A Message can only exist within one folder at a time, but a Thread with many messages may span several folders.

      Folders are only supported on accounts for which `organization_unit` is folder. You can check if an account supports labels by looking at the organization_unit property on the Account object.

      ## Nested Folders

      IMAP has very limited support for nested folders. It encodes a folder's path in its name. For example, the folder Accounting/Taxes will actually be named Accounting.Taxes or even INBOX.Accounting.Taxes depending on your IMAP server. To complicate things, different IMAP servers use different path separators. For example, Taxes.Accounting on server A may be Taxes\Accounting on server B.

      The Nylas API handles nested IMAP folders transparently. Creating a Taxes/Invoices folder using the API will create a folder with the right path separators. e.g: Depending on your server: INBOX.Taxes.Invoices or Taxes/Invoices.

      ## The Folders Object

      | Attribute  | Type | Description  |
      |----:|---|:----|
      | `id` | string | Globally unique object identifier. |
      | `object` | string | A string describing the type of object (value is "folder").
      | `account_id` | string | Reference to parent account object. |
      | `name` | string | Standard categories type, based on [RFC-6154](http://tools.ietf.org/html/rfc6154). <br>Can be one of the following: <ul><li>inbox</li><li>all</li><li>trash</li><li>archive</li><li>drafts</li><li>sent</li><li>spam</li><li>important</li><li>null (regular user-created folder)</li></ul>
      | `display_name`| string | Localized name of folder, matching what is presented in their other mail apps. If you are displaying folders, use this instead of `name`. |
  - name: Hosted Authentication
  - name: Native Authentication
  - name: Apps and Accounts
  - name: Accounts
    description: |-
      An account corresponds to an email address, mailbox, and optionally a calendar. When connecting to the Nylas API, a specific access token gives you access to a specific account’s data.

      ## The Accounts Object
      | attribute | type  | description  |
      |----:|----|:----|
      | `id` | string | A globally unique object identifier. |
      | `object` | string | A string describing the type of object (value is `"account"`).
      | `account_id` | string | A reference to the parent account object (self-referential in this case). |
      | `name` | string | The full name of the user, used as the default `"from"` name when sending mail. |
      | `email_address` | string | The canonical email address of the account. For Gmail accounts, this removes periods and plus suffixes. |
      | `provider` | string | Specifies the provider that backs the account (e.g. `gmail` or `eas`). See [Supported Providers](ref:supported-providers) for a full list. |
      | `organization_unit` | string | Specify either `"label"` or `"folder"`, depending on the provider capabilities. |
      | `sync_state` | string | The syncing status of the account. See the [Sync status](ref:account-sync-status) documentation for possible values. |
      | `linked_at` | int32 | A Unix timestamp indicating when this account was originally connected to Nylas.
security: []
