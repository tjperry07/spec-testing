openapi: 3.0.0
info:
  title: Nylas API documentation
  version: '1.0'
  description: |-
    Nylas Test Template. Messages and account only

    # This is a heading
    some text

    ## Level Two
    some text

    ### Level Three
    some text

    # Second heading
    some text

    ## Level Two
    some text

    ### Level Three
servers:
  - url: 'https://api.nylas.com'
paths:
  /messages:
    get:
      summary: Get Messages
      tags:
        - messages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
              examples:
                example-1:
                  value:
                    - account_id: 43jf****
                      bcc: []
                      body: |-
                        <html>
                        <head>
                         <meta charset="UTF-8">
                         <style type="text/css">
                         html {
                         -webkit-text-size-adjust:none;
                         }
                         body {
                         width:100%;
                         margin:0 auto;
                         padding:0;
                        }
                          p {
                         width:280px;
                         line-height: 16px;
                         letter-spacing: 0.5px;
                         }
                         </style>
                         <title>Welcome  ...  </html>
                      cc: []
                      date: 1557950729
                      events: []
                      files: []
                      folder:
                        display_name: Inbox
                        id: 7hcg****
                        name: inbox
                      from:
                        - email: no-reply@cc.yahoo-inc.com
                          name: Yahoo
                      id: 7a8939****
                      object: message
                      reply_to:
                        - email: no-reply@cc.yahoo-inc.com
                          name: Yahoo
                      snippet: 'Hi James, james****@yahoo.com. Welcome.'
                      starred: false
                      subject: Welcome
                      thread_id: cvsp****
                      to:
                        - email: james****@yahoo.com
                          name: ''
                      unread: true
      operationId: get-messages
      description: The messages endpoint
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: integer
            format: int32
          in: query
          name: limit
          description: 'The number of objects to return. Defaults to 100. If set too high, requests may fail to prevent excessively large response bodies.'
      x-codeSamples:
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.nylas.com/messages',
              qs: {limit: 'SOME_INTEGER_VALUE'},
              headers: {authorization: 'Bearer REPLACE_BEARER_TOKEN'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://api.nylas.com/messages?limit=SOME_INTEGER_VALUE' \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell + Httpie
          source: |-
            http GET 'https://api.nylas.com/messages?limit=SOME_INTEGER_VALUE' \
              authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.nylas.com")

            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/messages?limit=SOME_INTEGER_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.nylas.com/messages?limit=SOME_INTEGER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://api.nylas.com/messages');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData([
              'limit' => 'SOME_INTEGER_VALUE'
            ]);

            $request->setHeaders([
              'authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.nylas.com/messages');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'limit' => 'SOME_INTEGER_VALUE'
            ]));

            $request->setHeaders([
              'authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
components:
  schemas:
    Messages:
      title: Messages
      type: object
      x-examples:
        example-1:
          - account_id: 43jf****
            bcc: []
            body: |-
              <html>
              <head>
               <meta charset="UTF-8">
               <style type="text/css">
               html {
               -webkit-text-size-adjust:none;
               }
               body {
               width:100%;
               margin:0 auto;
               padding:0;
              }
                p {
               width:280px;
               line-height: 16px;
               letter-spacing: 0.5px;
               }
               </style>
               <title>Welcome  ...  </html>
            cc: []
            date: 1557950729
            events: []
            files: []
            folder:
              display_name: Inbox
              id: 7hcg****
              name: inbox
            from:
              - email: no-reply@cc.yahoo-inc.com
                name: Yahoo
            id: 7a8939****
            object: message
            reply_to:
              - email: no-reply@cc.yahoo-inc.com
                name: Yahoo
            snippet: 'Hi James, james****@yahoo.com. Welcome.'
            starred: false
            subject: Welcome
            thread_id: cvsp****
            to:
              - email: james****@yahoo.com
                name: ''
            unread: true
      properties:
        id:
          type: string
          description: 'A globally unique object identifier. '
        object:
          type: string
          description: A string describing the type of object (value is "message")
        account_id:
          type: string
          description: Reference to a parent account object.
  securitySchemes:
    ACCESS_TOKEN:
      type: http
      scheme: bearer
    ENCODED_AUTH:
      type: http
      scheme: basic
tags:
  - name: messages
    description: |-
      Messages are the fundamental object of the Nylas platform, and the core building block for most email applications. They contain several pieces of information, such as when a message was sent, the sender's address, to whom it was sent, and the message body. They can also contain files (attachments), calendar event invitations, and more.

      <div style="background-color: #F0F0F0;padding: 12px 0px 12px 12px;border-left: 5px solid #F90258;">Although message bodies are represented in HTML, they are generally not safe to directly inject into a web app. This could result in global styles being applied to your app, or the execution of arbitrary JavaScript.</div>

      <br>

      # The Message Object

      Responses from the `/messages` endpoint are encoded as UTF-8 JSON objects with the following attributes:

      | Attribute  | Type | Description  |
      |----:|---|:----|
      | `id` | string | A globally unique object identifier. |
      | `object` | string | A string describing the type of object (value is "message").
      | `account_id` | string | Reference to a parent account object. |
      | `thread_id` | string | Reference to a parent thread object (all messages have a thread). |
      | `subject` | string | The subject line of the message. |
      | `from` | array | A list of name+email pairs the message was sent from. This is usually one object, but can be many. |
      | `to` | array | An array of name+email pairs the message was sent to. |
      | `cc` | array | An array of name+email pairs the message was cc'd to. |
      | `bcc` | array | An array of name+email pairs the message was bcc'd to. For received mail this is nearly always empty (for obvious reasons). |
      | `reply_to` | array | An array of name+email pairs replies should be sent to. |
      | `date` | unix timestamp | A timestamp of the date the message was received by the mail server. **Note:** This may be different from the unverified `Date` header in raw message object.
      | `unread` | boolean | Indicates the message is unread. This is the default for new incoming mail (mutable). |
      | `starred`  | boolean | Indicates the message is in a starred or flagged state (mutable). |
      | `snippet`  | string | A shortened plain-text preview of the message body.
      | `body` |  string | The full HTML message body. Messages with only plain-text representations are up-converted to HTML.
      | `files`  | array | An array of [File](ref:files) objects, if the message includes attachments.
      | `events`  | array | An array [Event](ref:events) objects, if message includes calendar invites.
      | `folder` | folder object | A single folder object indicating the location of the message. This is present only if the parent account's `organization_unit` is `folder`. This property can be changed to move the message to a different folder.
      | `labels` | array | A list of [Label](ref:labels) objects. This is present only if the parent account's `organization_unit` is `label`. These have Gmail-style semantics and can be arbitrarily added and removed from messages. |

      ## Supported Modifications

      Like [Threads](ref:threads), you can make many modifications to the state of messages. You can:

      1. Modify the unread status.
      2. Star or unstar the message.
      3. Move the message to a different folder.
      4. Modify the message's labels.

      The Nylas APIs expose a parsed and sanitized version of the original [RFC-2822](https://www.ietf.org/rfc/rfc2822.txt) email object, combined with the state from the mail server, such as unread status and folder location. This results in a simple and universal object type, that makes building applications a breeze.

      We still provide access to the [RFC-2822 raw message](ref:raw-message-contents) object, if needed.

      ## Message Views

      Messages support the use of Views by including the view query parameter in your request.

      The expanded message view exposes several additional RFC2822 headers, useful for implementing custom threading or cross-mailbox identification. Pass the view=expanded query parameter when making requests to /messages and /messages/{id}.

      The following block is an example of what is added to the message object when using the expanded view.

      ```json
      {
        "headers": {
          "In-Reply-To": "<evh5uy0shhpm5d0le89goor17-0@mailer.nylas.com>",
          "Message-Id": "<84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>",
          "References": ["<evh5uy0shhpm5d0le89goor17-0@mailer.nylas.com>"],
        }
      }
      ```

      These values are unrelated to Nylas object IDs. Since they are provided by clients without validation, there is no guarantee for their accuracy, uniqueness, or consistency.

      | Header | Requirement | Description |
      | ----------|-------|-------| 
      | `Message-Id` | optional | Generated by clients while sending messages. It is different from a message's ID returned by the Nylas API (the message object's `id`). Unlike the `id`, the `Message-Id` header is *not* guaranteed to be unique since it is generated by clients. This field may be null. |
      | `In-Reply-To` | optional | The parent `Message-Id` to which this message replied. Expected `null` for messages that are not replies. |
      | `References` | optional | A list of `Message-Id`s related to a given message. Expected empty for messages which are not replies or related to existing messages. |
