openapi: 3.0.0
info:
  title: Nylas API Template
  version: '2.1'
  description: This demonstrates how to document Nylas REST APIs.
  contact:
    url: 'http://support.nylas.com/'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  x-logo:
    url: ''
servers:
  - url: 'https://api.nylas.com'
paths:
  /folders:
    get:
      tags:
        - Folders
      parameters:
        - name: in
          description: 'Use the `in` filter with`folder_id`, `name`, `display_name`.'
          schema:
            type: string
          in: query
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder-Object'
              examples:
                ReturnAllFoldersResponse:
                  value:
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Archive
                      id: ajs4ef7xu74vns6o5ufsu69m7
                      name: archive
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Conversation History
                      id: etmvbqwqo64vlm73qvyfj2tet
                      name: string
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Deleted Items
                      id: blrfzbz4r066ip8x1bh8k8g1y
                      name: trash
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Drafts
                      id: a6vnuwv9gjj1xidxkhyzxeke1
                      name: drafts
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Inbox
                      id: b8un1ec0syrv94153fg3p61ci
                      name: inbox
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Junk Email
                      id: 8tqebvw8t0aky7f2or1oagwt8
                      name: spam
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Sent Items
                      id: clzqp0nsim0138aohwzha34vk
                      name: sent
                      object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: get-folders
      summary: Return All Folders
      description: Returns all folders.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            GET /folders HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVUWjZ2****
            cache-control: no-cache
        - lang: bash
          label: cURL
          source: |-
            # Return all folders found in the user's inbox
            curl -X GET 'https://api.nylas.com/folders' \
            -H 'Authorization: Bearer ACCESS_TOKEN'

            # Use offset, and limit to paginate the results
            curl -X GET 'https://api.nylas.com/folders?limit=2&offset=4' \
            -H 'Authorization: Bearer ACCESS_TOKEN
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return all folders found in the user's inbox
            nylas.folders.all()

            # Use offset, and limit to paginate the results
            nylas.folders.where(limit=2, offset=4)

            # Return the first folder
            folder = nylas.folders.first()

            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id'
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Return all folders found in the user's inbox
            nylas.folders

            # Use offset, and limit to paginate the results
            nylas.folders.limit(2).offset(4)

            # Return the last folder
            nylas.folders.last

            # Return the first folder
            folder = nylas.folders.first

            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: js
          label: Node.js SDK
          source: |-
            // Return all folders found in the user's inbox
            nylas.folders.list().then(folders => console.log(folders));

            // Use offset, and limit to paginate the results
            nylas.folders.list({limit: 2, offset: 4}).then(folders => console.log(folders))

            // Return the first folder
            nylas.folders.first().then(folder => console.log(folder));

            // The following attributes are available for the folder object
            folder.id
            folder.object
            folder.accountId
            folder.name
            folder.displayName
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.FolderQuery;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void getFoldersExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();
                    
                    // Return all folders found in the user's inbox 
                    folders.list();
                    
                    // Use offset, and limit to control pagination
                    folders.list(new FolderQuery().limit(2).offset(4));
                    
                    // Return the first folder
                    Folder folder = folders.list(new FolderQuery().limit(1)).get(0);
                    
                    // The following attributes are available for the folder object
                    folder.getDisplayName();
                    folder.getName();
                    folder.getObject();
                    folder.getId();
                    folder.getAccountId();
                    }
            }    
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder-Create'
            examples:
              CreateAFolderRequest:
                value:
                  display_name: My Renamed Folder
      tags:
        - Folders
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder-Object'
              examples:
                CreateAFolderResponse:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: post-folders
      summary: Create a folder
      description: Creates a new folder.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            POST /folders HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVUW****
            cache-control: no-cache
            {
                "display_name": "My New Folder"
            }
        - lang: bash
          label: cURL
          source: |-
            # Create a new folder
            curl -X POST 'https://api.nylas.com/folders' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "display_name": "My New Folder"
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Create a new folder
            folder = nylas.folders.create()

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save the folder to Nylas and the 3rd party provider
            # Note: folder.display_name must be assigned a value before you can save the folder
            folder.save()
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Create a new folder
            folder = nylas.folders.create(display_name: 'My Custom Folder')

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save the folder to Nylas and the 3rd party provider
            # Note: folder.display_name must be assigned a value before you can save the folder
            folder.save
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void postFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();
                    
                    // Create a new folder with the provided display name
                    Folder folder = folders.create("My Custom Folder");
                    }
            }
  '/folders/{id}':
    get:
      tags:
        - Folders
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder-Object'
              examples:
                example-1:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: get-folders-id
      summary: Return a folder
      description: Returns a folder by ID.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            GET /folders/4zv7p**** HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVUWjZ2****
            cache-control: no-cache
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/folders/{folder_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Replace {id} with the appropriate folder id
            folder = nylas.folders.get('{id}')


            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} with the appropriate folder id
            folder = nylas.folders.find('{id}')


            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: js
          label: Node.js SDK
          source: |-
            # Replace {id} with the appropriate folder id
            nylas.folders.find('{id}').then(folder => console.log(folder));


            # The following attributes are available for the folder object
            folder.id
            folder.object
            folder.accountId
            folder.name
            folder.displayName
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void getFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();
                    
                    // Replace {id} with the appropriate folder id
                    Folder folder = folders.get("{id}");

                    // The following attributes are available for the folder object
                    folder.getDisplayName();
                    folder.getName();
                    folder.getId();
                    folder.getAccountId();
                    folder.getObject();
                    }
            }
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder-Update'
            examples:
              UpdateAFolderRequest:
                value:
                  display_name: My Renamed Folder
                  name: renamed-folder
      tags:
        - Folders
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder-Object'
              examples:
                UpdateAFolderResponse:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: put-folders-id
      summary: Update a folder
      description: Updates a folder by ID.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            PUT /folders/51si**** HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVU****
            Accept: */*
            Cache-Control: no-cache
            Host: api.nylas.com
            accept-encoding: gzip, deflate
            content-length: 43
            Connection: keep-alive
            cache-control: no-cache

            {
                "display_name": "My Renamed Folder"
            }
        - lang: bash
          label: cURL
          source: |-
            # Replace {id} to get a specific folder
            curl -X PUT 'https://api.nylas.com/folders/{folder_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "display_name": "My New Folder Renamed"
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Replace {id} to get a specific folder
            folder = nylas.folders.get('{id}')

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save folder changes to Nylas and the 3rd party provider
            # display_name must be set before calling this function
            folder.save()
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} to get a specific folder
            folder = nylas.folders.find('{id}')

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save folder changes to Nylas and the 3rd party provider
            folder.save
        - lang: js
          label: Node.js SDK
          source: |-
            // Replace {id} to get a specific folder
            let folder;
            nylas.folders.find('{id}').then(res => folder = res);

            // The following attributes can be set for a new folder object
            folder.displayName = 'My Custom Folder';

            // Save folder changes to Nylas and the 3rd party provider
            folder.save();
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void putFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();

                    // Update a folder's display name by passing the folder ID and the new name.
                    folders.setDisplayName("{folder_id}", "My Custom Label");
                    }
            } 
    delete:
      tags:
        - Folders
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
      security:
        - ACCESS_TOKEN: []
      operationId: delete-folders-id
      summary: Delete a folder
      description: Deletes a folder.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            DELETE /folders/51si**** HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            cache-control: no-cache
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE 'https://api.nylas.com/folders/{folder_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' 
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Delete folders by specifying the appropriate id
            nylas.folders.delete('{id}')
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} to get a specific folder
            folder = nylas.folders.find('{id}')

            # Delete folder
            folder.destroy
        - lang: js
          label: Node.js SDK
          source: |-
            // Delete folders by specifying the appropriate id
            nylas.folders.delete('{id}');
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void deleteFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();

                    // Delete folders by specifying the appropriate id
                    folders.delete("{folder_id}");
                    }
            } 
    parameters:
      - name: id
        description: The ID of the folder.
        schema:
          type: string
        in: path
        required: true
  /oauth/authorize:
    get:
      tags:
        - Hosted Authentication
      parameters:
        - name: client_id
          description: Your Nylas application's client ID.
          schema:
            type: string
          in: query
          required: true
        - name: redirect_uri
          description: The URI to which the user will be redirected once authentication completes. This must match a URI registered in the developer dashboard.
          schema:
            type: string
          in: query
          required: true
        - name: response_type
          description: '`code` for server side, `token` for client side.'
          schema:
            type: string
          in: query
          required: true
        - name: scopes
          description: Any combination of supported authentication scopes.
          schema:
            type: string
          in: query
          required: true
        - name: login_hint
          description: 'The user’s email address, if known. If you don''t supply a `login_hint`, the Nylas OAuth flow will prompt the user for an email address to authenticate.'
          schema:
            type: string
          in: query
        - name: state
          description: 'An optional arbitrary string that is returned as a URL parameter in your redirect URI. You can pass a value here to keep track of a specific user’s authentication flow. This may also be used to protect against [CSRF attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The maximum length of this string is 255 characters.'
          schema:
            type: string
          in: query
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
              examples:
                AuthenticateUserResponse:
                  value:
                    code: string
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      security:
        - BASIC_AUTH: []
      operationId: get-oauth-authorize
      summary: Authenticate User
      description: Authenticate user.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/hosted-authentication/curl-get-oauth-authorize.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/hosted-authentication/python-get-oauth-authorize.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/hosted-authentication/ruby-get-oauth-authorize.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/hosted-authentication/node-get-oauth-authorize.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/hosted-authentication/java-get-oauth-authorize.java
  /oauth/token:
    post:
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              required:
                - client_id
                - client_secret
                - grant_type
                - code
              type: object
              properties:
                client_id:
                  description: Your Nylas application's client ID.
                  type: string
                client_secret:
                  description: Your Nylas Developer App client secret.
                  type: string
                grant_type:
                  description: Set to `authorization_code`.
                  type: string
                code:
                  description: The authorization code returned from `/oauth/authorize`.
                  type: string
            examples:
              SendAccessTokenRequest:
                value:
                  client_id: string
                  client_secret: string
                  grant_type: string
                  code: string
      tags:
        - Hosted Authentication
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
      security:
        - BASIC_AUTH: []
      operationId: post-oauth-token
      summary: Send Access Token
      description: Send access token.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            POST /oauth/token HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVUW****
            cache-control: no-cache
            {
                "client_id": "CLIENT_ID",
                "client_secret": "CLIENT_SECRET",
                "grant_type": "authorization_code",
                "code": "AUTHORIZATION_CODE"
            }------WebKitFormBoundary7MA4YWxkTrZu0gW--
        - lang: bash
          label: cURL
          source: |-
            curl -X POST \
              https://api.nylas.com/oauth/token \
              -H 'Authorization: Basic ENCODED_CLIENT_SECRET' \
              -d '{
                "client_id": "CLIENT_ID",
                "client_secret": "CLIENT_SECRET",
                "grant_type": "authorization_code",
                "code": "AUTHORIZATION_CODE"
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient

            # Create a client that has access to your Nylas app.
            nylas_app = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )

            # Get an access token that grants access to user data and functionality.
            # You need to generate a one-time-use code via Nylas to pass to this function.
            # See: https://docs.nylas.com/reference#oauthauthorize
            ACCESS_TOKEN = nylas_app.token_for_code('{code_from_nylas}')

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Now you have a Nylas client object that has access to user data and functionality
            print(nylas.account)
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas_token = api.authenticate(
              name: auth_hash[:info][:name],
              email_address: auth_hash[:info][:email],
              provider: :gmail,
              settings: { 
                google_client_id: ENV['GOOGLE_CLIENT_ID'],
                google_client_secret: ENV['GOOGLE_CLIENT_SECRET'],
                google_refresh_token: auth_hash[:credentials][:refresh_token] 
              }
            )
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');

            // Pass credentials to the Nylas client to manage authentication
            Nylas.config({
            clientId: CLIENT_ID,
            clientSecret: CLIENT_SECRET,
            });

            // Get an access token that grants access to user data and functionality.
            // You need to generate a one-time-use code via Nylas to pass to this function.
            // See: https://docs.nylas.com/reference#oauthauthorize
            let access_token;
            Nylas.exchangeCodeForToken(NYLAS_CODE).then(resp => access_token = resp.access_token);

            // Pass access_token to the Nylas client
            const nylas = Nylas.with(access_token);

            // Now your Nylas client object has access to user data and functionality
            nylas.calendars.list();
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.NylasAccount;
            import com.nylas.HostedAuthentication;

            public class NylasExamples {
                public static void hostedTokenExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();

                    // Create a client that has access to your Nylas app.
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    HostedAuthentication authentication = application.hostedAuthentication();

                    // Get an access token that grants access to user data and functionality.
                    // You need to generate a one-time-use code via Nylas to pass to this function.
                    // See: https://docs.nylas.com/reference#oauthauthorize
                    String accessToken = authentication.fetchToken("{code}").getAccessToken();

                    // Now you have a Nylas client object that has access to user data and functionality
                    NylasAccount account = nylas.account(accessToken);
                }        
            }
  /oauth/revoke:
    post:
      tags:
        - Hosted Authentication
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
      security:
        - BASIC_AUTH: []
      operationId: post-oauth-revoke
      summary: Revoke Access Tokens
      description: |-
        Revoke access tokens.

        Include the to-be-revoked access token as the HTTP Basic Auth username.

        ```
        curl -X POST https://api.nylas.com/oauth/revoke --user ACCESS_TOKEN_TO_REVOKE
        ```

        A 200 status code response with a body of `{ "success": True }` signifies that the token has been successfully revoked and can no longer be used.

        If needed, you can also revoke all active access tokens by using the Account Management endpoints.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            POST /oauth/revoke HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Basic WVVUW****
            cache-control: no-cache
        - lang: bash
          label: cURL
          source: 'curl -X POST https://api.nylas.com/oauth/revoke --user ACCESS_TOKEN_TO_REVOKE:'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient

            # Pass the access token to the Nylas client to manage the account's tokens
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Revoke the access token that was passed to the Nylas client.
            nylas.revoke_token()

            # Revoke all access tokens for the user account.
            nylas.revoke_all_tokens()

            # You can also revoke all tokens except for one.
            nylas.revoke_all_tokens(keep_access_token='{ACCESS_TOKEN}')
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Revoke the nylas access token so it cannot be used in the future (you probably don't want to do this
            # unless people deactivate their account with your software)
            api.revoke(nylas_token)
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');

            // Pass credentials to the Nylas client to manage authentication
            Nylas.config({
            clientId: CLIENT_ID,
            clientSecret: CLIENT_SECRET,
            });

            // Get the user account
            let account;
            Nylas.accounts.find(ACCOUNT_ID).then(resp => account = resp);

            // Revoke all access tokens for the user account.
            account.revokeAll();

            // You can also revoke all tokens except for one.
            nylas.revokeAll(ACCESS_TOKEN);
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Accounts;

            public class NylasExamples {
                public static void revokeTokensExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    Accounts accounts = application.accounts();

                    // Revoke all tokens for an account by providing its ID
                    accounts.revokeAllTokensForAccount("{accountId}", null);

                    // Pass an optional access token to revoke all tokens except for one.
                    accounts.revokeAllTokensForAccount("{accountId}", "{ACCESS_TOKEN}");
                    }
            }
  /connect/authorize:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Native-Auth-Post'
            examples: {}
      tags:
        - Native Authentication
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
          required: true
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
              examples:
                example-1:
                  value:
                    code: one-time-use-code
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: object
              examples:
                example-1:
                  value:
                    message: Please include the missing fields
                    type: auth_error
                    missing_fields:
                      - provider
                    error: Missing fields.
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                type: object
              examples:
                example-1:
                  value:
                    message: Please include the missing fields
                    type: auth_error
                    missing_fields:
                      - provider
                    error: Missing fields.
          description: Forbidden
      operationId: post-connect-authorize
      summary: Send Authorization
      description: |
        This endpoint is where your application sends mailbox credentials to verify they are correct. This begins the connection process.

        A successful authentication will return your application a JSON encoded body with a single code parameter. In the next step, your server backend should exchange this code for an access token, which can then be used to make API requests.

        **Notice about POSTing to /connect/authorize**

        We recommend that you POST these values directly to api.nylas.com using AJAX from your web application. By sending these directly, your app will never be required to manipulate or store passwords for a user's mailbox. (You don't even want to take the chance of logging these by accident!)
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            # The following examples will return a one-time-use code.
            # This code can be exchanged for an account access token that grants full access to user account functionality.

            # Authenticate Google Accounts
            curl -X POST https://api.nylas.com/connect/authorize -d '{ 
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "gmail",
                "settings": {
                    "google_client_id": "{google_api_client_id}",
                    "google_client_secret": "{geoogle_api_client_secret}",
                    "google_refresh_token": "{google_api_refresh_token}"
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'

            # Authenticate Google Account using a Service Account
            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@gmail.com", # Account to be authenticated
                "provider": "gmail",
                "settings": {
                    "service_account_json": { # Service account credentials
                    "type": "service_account",
                    "project_id": "my-google-app-123456",
                    "private_key_id": "68915b4e55baac9191dd32e0be784687c6873b14",
                    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIE....fZ1F8=\n-----END PRIVATE KEY-----\n",
                    "client_email": "test-service-account@my-google-app-123456.iam.gserviceaccount.com",
                    "client_id": "10569134234239528168761",
                    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                    "token_uri": "https://oauth2.googleapis.com/token",
                    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test-service-account%40my-google-app-123456.iam.gserviceaccount.com"
                }
                "scopes": "calendar"
            }'

            # Authenticate Office365 Accounts
            curl -X POST https://api.nylas.com/connect/authorize -d '{ 
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "office365",
                "settings":{
                    "microsoft_client_id":     "{microsoft_client_id}",
                    "microsoft_client_secret": "{microsoft_client_secret}",
                    "microsoft_refresh_token": "{microsoft_refresh_token}",
                    "redirect_uri":            "https://example.com/redirect", # Redirect URI that the was originally used to get the refresh token        
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'

            # Authenticate Exchange Accounts
            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "exchange",
                "settings": {
                    "username": "nyla@nylas.com",
                    "password": "MakeEmailSuckLess",
                    "exchange_server_host": "exchange.nylas.com"
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'

            # Authenticate Exchange Account using a Service Account via Password
            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com", # Account to authenticate
                "provider": "exchange",
                "settings": {
                    "username": "username", # Service account username
                    "password": "password", # Service account password
                    "service_account": true
                }
                "scopes": "calendar.read_only"
            }'

            # Authenticate Exchange Account using a Service Account via OAuth
            curl -X POST https://api.nylas.com/connect/authorize -d '{ 
                "client_id":     "nylas_client_id",
                "name":          "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",   # Account to authenticate
                "provider":      "exchange",
                "settings": {
                    "microsoft_client_id":     "{microsoft_client_id}",
                    "microsoft_client_secret": "{microsoft_client_secret}",
                    "microsoft_refresh_token": "{microsoft_refresh_token}", # Service account refresh token!
                    "redirect_uri":            "https://example.com/redirect",
                    "service_account": true
                },
                "scopes": "calendar"
            }'

            # Authenticate Outlook Accounts
            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@outlook.com",
                "provider": "outlook",
                "settings": {
                    "username": "nyla@outlook.com",
                    "password": "MakeEmailSuckLess",
                    "exchange_server_host": "eas.outlook.com"
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'

            # Authenticate known IMAP providers
            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@aol.com",
                "provider": "aol",
                "settings": {
                    "password": "MakeEmailSuckLess"
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'

            # Authenticate a generic IMAP provider
            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "imap",
                "settings": {
                    "imap_host": "imap.nylas.com",
                    "imap_port": 993,
                    "imap_username": "nyla",
                    "imap_password": "MakeEmailSuckLess",
                    "smtp_host": "smtp.nylas.net",
                    "smtp_port": 587,
                    "smtp_username": "nyla",
                    "smtp_password": "MakeEmailSuckLess",
                    "ssl_required": true
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            import requests

            # Create a client that has access to your Nylas app.
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )

            # Authenticate Gmail Accounts
            gmail_authentication = {
                # Example: https://github.com/nylas/nylas-python/tree/master/examples/native-authentication-gmail
                "client_id": CLIENT_ID,
                "name":          "Nyla The Cheetah",
                "email_address": "nyla@nylas.com",
                "provider":      "gmail",
                "settings":      {  # See the Example above to learn more about these values
                  "google_client_id":     "{google_api_client_id}",
                  "google_client_secret": "{google_api_client_secret}",
                  "google_refresh_token": "{google_api_refresh_token}"
                },
                "scopes": "email,calendar,contacts"
            }

            # Post the authentication payload to Nylas.
            nylas_authorization = requests.post(
                    "https://api.nylas.com/connect/authorize", json=gmail_authentication
            )

            # This code can be exchanged for an account access token
            nylas_code = nylas_authorization.json()["code"]

            # -------------------------------------------
            # The remainder contains examples of how to authenticate other types of accounts

            # Authenticate Exchange Accounts
            exchange_authentication = {
                # Example: https://github.com/nylas/nylas-python/tree/master/examples/native-authentication-exchange
                "client_id": CLIENT_ID,
                "name":          "Nyla The Cheetah",
                "email_address": "nyla@nylas.com",
                "provider":      "exchange",
                "settings": {
                    "username": "nyla@exchange_server.com",
                    "password": "MakeEmailSuckLess",
                    "eas_server_host": "exchange.your_server.com"
                },
                "scopes": "email,calendar,contacts"
            }

            # Authenticate an Outlook Account
            outlook_authentication = {
                "client_id": CLIENT_ID,
                "name":          "Nyla The Cheetah",
                "email_address": "nyla@outlook.com",
                "provider": "outlook",
                "settings": { # Uses the same format as Exchange Servers
                    "username": "nyla@outlook.com",
                    "password": "MakeEmailSuckLess",
                    "eas_server_host": "outlook.com"

                },
                "scopes": "email,calendar,contacts"
            }

            # Authenticate an account from a known IMAP provider
            known_imap_authentication = {
                "client_id": CLIENT_ID,
                "name":          "Nyla The Cheetah",
                "email_address": "nyla@yahoo.com",
                "provider": "yahoo",  # can also be aol, icloud, or hotmail
                "settings": {
                    "password": "MakeEmailSuckLess"
                },
                "scopes": "email,calendar,contacts"
            }

            # Authenticate any other IMAP account
            generic_imap_authentication = {
                "client_id": CLIENT_ID,
                "name": "Nyla The Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "imap",
                "settings":      {
                    "imap_host":     "imap.nylas.com",
                    "imap_port":     12345,
                    "imap_username": "nyla",
                    "imap_password": "MakeEmailSuckLess",
                    "smtp_host":     "smtp.nylas.net",
                    "smtp_port":     12346,
                    "smtp_username": "nyla",
                    "smtp_password": "MakeEmailSuckLess",
                    "ssl_required":  'true'
                },
                "scopes": "email,calendar,contacts"
            }
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas_token = api.authenticate(
              name: auth_hash[:info][:name], 
              email_address: auth_hash[:info][:email],
              provider: :gmail,
              settings: {
                google_client_id: ENV['GOOGLE_CLIENT_ID'],
                google_client_secret: ENV['GOOGLE_CLIENT_SECRET'],
                google_refresh_token: auth_hash[:credentials][:refresh_token] 
              }
            )
        - lang: js
          label: Node.js SDK
          source: "// The following examples will return a Promise, which resolves to a one-time-use code.\n// This code can be exchanged for an account access token that grants full access to user account functionality.\n\nconst Nylas = require('nylas');\n\nNylas.config({\n  clientId: CLIENT_ID,\n  clientSecret: CLIENT_SECRET,\n});\n\n// Authenticate Google Accounts\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@gmail.com',\n  provider: 'gmail',\n  settings: {\n    google_client_id: '{google_api_client_id}',\n    google_client_secret: '{google_api_client_secret}',\n    google_refresh_token: '{google_api_refresh_token}',\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate Office365 Accounts\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@nylas.com',\n  provider: 'office365',\n  settings: {\n    microsoft_client_id: '{microsoft_client_id}',\n    microsoft_client_secret: '{microsoft_client_secret}',\n    microsoft_refresh_token: '{microsoft_refresh_token}',\n    redirect_uri: 'https://example.com/redirect', // Redirect URI that the was originally used to get the refresh token\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate Exchange Accounts\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@nylas.com',\n  provider: 'exchange',\n  settings: {\n    username: 'nyla@nylas.com',\n    password: 'MakeEmailSuckLess'\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate Outlook Accounts\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@outlook.com',\n  provider: 'outlook',\n  settings: {\n    username: 'nyla@outlook.com',\n    password: 'MakeEmailSuckLess',\n    eas_server_host: \"outlook.com\"\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate known IMAP providers\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@aol.com',\n  provider: 'aol',\n  settings: {\n  \tpassword: 'MakeEmailSuckLess',\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate a generic IMAP provider\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@nylas.com',\n  provider: 'imap',\n  settings: {\n    imap_host: 'imap.nylas.com',\n    imap_port: 993,\n    imap_username: 'nyla',\n    imap_password: 'MakeEmailSuckLess',\n    smtp_host: 'smtp.nylas.com',\n    smtp_port: 465,\n    smtp_username: 'nyla',\n    smtp_password: 'MakeEmailSuckLess',\n    ssl_required: true\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});"
        - lang: java
          label: Java SDK
          source: "import java.io.IOException;\nimport com.nylas.RequestFailedException;\nimport com.nylas.NylasApplication;\nimport com.nylas.NylasClient;\nimport com.nylas.Scope;\nimport com.nylas.NativeAuthentication;\nimport com.nylas.NativeAuthentication.AuthRequestBuilder;\n\nimport com.nylas.GoogleProviderSettings;\nimport com.nylas.ImapProviderSettings;\n\n\npublic class NylasExamples {\n    public static void nativeAuthExample() throws IOException, RequestFailedException {\n        NylasClient nylas = new NylasClient();\n        NylasApplication application = nylas.application(\"{CLIENT_ID}\", \"{CLIENT_SECRET}\");\n        NativeAuthentication authentication = application.nativeAuthentication();\n\n        ImapProviderSettings settings = new ImapProviderSettings()\n            .imapHost(\"imap.nylas.com\")\n            .imapPort(1234)\n            .imapUsername(\"nyla\")\n            .imapPassword(\"MakeEmailSuckLess\")\n            .smtpHost(\"smtp.nylas.com\")\n            .smtpPort(2345)\n            .smtpUsername(\"nyla\")\n            .smtpPassword(\"MakeEmailSuckLess\")\n            .sslRequired(true)\n            ;\n\n        AuthRequestBuilder authRequest = authentication.authRequest()\n            .name(\"Nyla The Cheetah\")\n            .emailAddress(\"nyla@nylas.com\")\n            .providerSettings(settings)\n            .scopes(Scope.EMAIL, Scope.CALENDAR, Scope.CONTACTS);\n                                \n        System.out.println(\"Making a native authentication request.\");\n        String authorizationCode = authRequest.execute();\n        System.out.println(\"Success! Authorization code: \" + authorizationCode);\n\n\t\t\t\t// --------------------------------------------------------\n        // The remainder contains examples of how to authenticate other types of accounts\n        \n        // Authenticate Google Accounts\n        GoogleProviderSettings googleSettings = new GoogleProviderSettings()\n            .googleClientId(\"google.api.client.id\")\n            .googleClientSecret(\"google.api.client.secret\")\n            .googleRefreshToken(\"google.refresh.token\")\n            ;\n\n        ProviderSettings office365Auth = new MicrosoftOffice365ProviderSettings()\n                .microsoftClientId(\"{MS_CLIENT_ID}\")\n                .microsoftClientSecret(\"{MS_CLIENT_SECRET}\")\n                .microsoftRefreshToken(\"{MS_REFRESH_TOKEN}\")\n                .redirectUri(\"example.com/nylas-redirect\")\n                ;\n        \n        ProviderSettings exchangeAuth = new MicrosoftExchangeProviderSettings()\n                .username(\"nyla@exchange_server.com\")\n                .password(\"MakeEmailSuckLess\")\n                .easServerHost(\"exchange.your_server.com\")\n                ;\n        \n        ProviderSettings knownImapAuth = new KnownImapProviderSettings(\n                \"yahoo\")\n                .password(\"MakeEmailSuckLess\")\n                ;\n    }\n}"
      security:
        - BASIC_AUTH: []
  /account:
    get:
      tags:
        - Accounts
      parameters:
        - name: Accept
          schema:
            default: application/json
            type: string
          in: header
          required: true
        - name: Content-Type
          schema:
            default: application/json
            type: string
          in: header
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account-Get'
              examples:
                ReturnAccountDetails:
                  value:
                    id: awa6ltos76vz5hvphkp8k17nt
                    object: account
                    account_id: awa6ltos76vz5hvphkp8k17nt
                    name: Dorothy Vaughan
                    provider: gmail
                    organization_unit: label
                    sync_state: running
                    linked_at: 1470231381
                    email_address: dorothy@spacetech.com
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
      security:
        - BASIC_AUTH: []
      operationId: get-account
      summary: Return Account Details
      description: Returns account details.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |
            GET /account HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            Authorization: Bearer ACCESS_TOKEN
            cache-control: no-cache
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/account \
              -H 'Authorization: Bearer ACCESS_TOKEN' \
              -H 'Content-Type: application/json' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: |-
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            account = nylas.account

            # The following attributes are available for the Account object
            account.id
            account.account_id
            account.object
            account.name
            account.email_address
            account.provider
            account.organization_unit
            account.sync_state
            account.linked_at
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas = Nylas::API.new(
                app_id: APP_ID,
                app_secret: APP_SECRET,
                access_token: ACCESS_TOKEN
            )

            account = nylas.current_account

            # The following attributes are available for the Account object
            account.id
            account.account_id
            account.object
            account.name
            account.email_address
            account.provider
            account.organization_unit
            account.sync_state
            account.linked_at
        - lang: js
          label: Node.js SDK
          source: |-
            nylas.account.get().then(account => console.log(account));

            // The following attributes are available for the Account object
            account.id
            account.accountId
            account.object
            account.name
            account.emailAddress
            account.provider
            account.organizationUnit
            account.syncState
            account.linkedAt
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.AccountDetail;
            import com.nylas.NylasClient;

            public class DocExamples {
                public static void getAccountExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    AccountDetail account = nylas.account("{ACCESS_TOKEN}").fetchAccountByAccessToken();
                    
                    // The following attributes are available for the account object
                    account.getId();
                    account.getName();
                    account.getEmailAddress();
                    account.getProvider();
                    account.getOrganizationUnit();
                    account.getSyncState();
                    account.getLinkedAt();
                    }
            }
  /connect/token:
    post:
      summary: Exchange the Token
      tags:
        - Native Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Native-Auth-Token'
              examples:
                ExchangeTokenResponse:
                  value:
                    access_token: token
                    account_id: account-id
                    billing_state: paid
                    email_address: nyla@nylas.com
                    id: id
                    linked_at: 1563496685
                    name: Nyla The Cheeta
                    object: account
                    organization_unit: label
                    provider: google
                    sync_state: running
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-connect-token
      description: |-
        This endpoint is where your application exchanges the code received from `/connect/authorize` and receives an access token. This associates the mailbox with your Nylas Cloud app.

        A successful response from this will be an account object with an access_token attribute. Once you’ve obtained a token, you include it with Nylas API requests as the HTTP Basic Auth Username.

        You can remove this account from your Nylas Cloud app in the Nylas API console.

        > **Never send your client secret to a browser!**
        This request should be made from your server. It's important that you never send your client secret to a browser. In order to do this, your browser JavaScript code should securely send the received code in the previous step to your web app, which in turn makes the request to `/connect/token`.
      x-code-samples:
        - lang: HTTP
          label: HTTP
          source: |-
            POST /connect/token HTTP/1.1
            Host: api.nylas.com
            Content-Type: application/json
            cache-control: no-cache
            {
                "client_id": "95fm****",
                "client_secret": "5s827****",
                "code": "fZztR****"
            }
        - lang: bash
          label: cURL
          source: |-
            curl -X POST "https://api.nylas.com/connect/token" -d '{
              "client_id": "{client-id}",
              "client_secret": "{client-secret}",
              "code": "{nylas_code}"
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient

            # Create a client that has access to your Nylas app.
            nylas_app = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )

            # Get an access token that grants access to user data and functionality.
            # You need to generate a one-time-use code via Nylas to pass to this function.
            # See: https://docs.nylas.com/reference#connectauthorize
            ACCESS_TOKEN = nylas_app.token_for_code('{code_from_nylas}')

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Now you have a Nylas client object that has access to user data and functionality
            print(nylas.account)
        - lang: ruby
          label: Ruby SDK
          source: "auth_hash = env['omniauth.auth']\n\nnylas_token = api.authenticate(name: auth_hash[:info][:name], \n  \temail_address: auth_hash[:info][:email], \n    provider: :gmail, settings:\n    { \n      google_client_id: ENV['GOOGLE_CLIENT_ID'],\n      google_client_secret: ENV['GOOGLE_CLIENT_SECRET'],\n      google_refresh_token: auth_hash[:credentials][:refresh_token] })\n\napi_as_user = api.as(nylas_token)"
        - lang: js
          label: Node.js SDK
          source: |-
            // The following examples will return a Promise, which resolves to a Nylas account, complete with account id and access token.
            // This access token grants full access to user account functionality.

            const Nylas = require('nylas');

            Nylas.config({
              clientId: CLIENT_ID,
              clientSecret: CLIENT_SECRET,
            });

            // First, you need to generate a one-time-use code via Nylas
            // See: https://docs.nylas.com/reference#connectauthorize
            let access_code;

            Nylas.connect.authorize({
              name: 'Nyla The Cheetah',
              email_address: 'nyla@gmail.com',
              provider: 'gmail',
              settings: {
                google_client_id: '{google_api_client_id}',
                google_client_secret: '{google_api_client_secret}',
                google_refresh_token: '{google_api_refresh_token}',
              },
              scopes: 'email.read_only,calendar.read_only,contacts.read_only'
            }).then(resp => access_code = resp.code);

            // Use this code to connect the account to your Nylas Application
            let account;
            Nylas.connect.token(access_code).then(resp => account = resp);

            // Use the account's access token to get a Nylas client with access to the account's data and functionality
            const nylas = Nylas.with(account.access_token);
            nylas.calendars.list().then(resp => console.log(resp));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.NylasAccount;
            import com.nylas.NativeAuthentication;


            public class NylasExamples {
                public static void nativeTokenExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    // Create a client that has access to your Nylas app.
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    NativeAuthentication authentication = application.nativeAuthentication();

                    // Get an access token that grants access to user data and functionality.
                    // You need to generate a one-time-use code via Nylas to pass to this function.
                    // See: https://docs.nylas.com/reference#connectauthorize
                    String accessToken = authentication.fetchToken("{code}").getAccessToken();

                    // Now you have a Nylas client object that has access to user data and functionality
                    NylasAccount account = nylas.account(accessToken);
                }
            }
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: Your client ID from the Nylas Developer console.
                client_secret:
                  type: string
                  description: Your client secret from the Nylas Developer console.
                code:
                  type: string
                  description: The value returned from calling `/connect/authorize`.
              required:
                - client_id
                - client_secret
                - code
            examples:
              ExchangeTokenRequest:
                value:
                  client_id: string
                  client_secret: string
                  code: string
  '/a/{client_id}/accounts':
    get:
      summary: Return All Accounts
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account-Return-All'
              examples:
                ReturnAllAccounts:
                  value:
                    - account_id: 622x1k5v1ujh55t6ucel7av4
                      billing_state: free
                      email: example@example.com
                      id: 622x1k5v1ujh55t6ucel7av4
                      provider: yahoo
                      sync_state: running
                      trial: false
                    - account_id: 123rvgm1iccsgnjj7nn6jwu1
                      billing_state: paid
                      email: example@example.com
                      id: 123rvgm1iccsgnjj7nn6jwu1
                      provider: gmail
                      sync_state: running
                      trial: false
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-a-client_id-accounts
      description: Returns a list of all accounts.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/account_management/return_all_accounts/return_all_curl.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/account_management/return_all_accounts/return_all_python.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/account_management/return_all_accounts/return_all_ruby.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/account_management/return_all_accounts/return_all_node.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/account_management/return_all_accounts/return_all_java.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client ID of your Nylas developer application.
  '/a/{client_id}/accounts/{id}':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the account.
    get:
      summary: Return a Account
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account-Return-All'
              examples:
                ReturnAnAccount:
                  value:
                    account_id: 123rvgm1iccsgnjj7nn6jwu1
                    billing_state: paid
                    email: example@example.com
                    id: 123rvgm1iccsgnjj7nn6jwu1
                    provider: gmail
                    sync_state: running
                    trial: false
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-a-client_id-accounts-id
      description: Returns details from a single account.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/account_management/return_account/return_account_curl.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/account_management/return_account/return_account_python.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/account_management/return_account/return_account_ruby.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/account_management/return_account/return_account_node.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/account_management/return_account/return_account.java
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
      security:
        - BASIC_AUTH: []
  '/a/{client_id}/accounts/{id}/downgrade':
    post:
      summary: Cancel an Account
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: string
                    minLength: 1
                required:
                  - success
              examples:
                CancelAnAccount:
                  value:
                    success: 'true'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-a-client_id-accounts-id-downgrade
      description: Cancels a paid Nylas account.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/account_management/cancel_account/cancel_account.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/account_management/cancel_account/cancel_account.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/account_management/cancel_account/cancel_account.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/account_management/cancel_account/cancel_account.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/account_management/cancel_account/cancel_account.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the account to cancel.
  '/a/{client_id}/accounts/{id}/upgrade':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the account to reactivate.
    post:
      summary: Reactivate an Account
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: string
                    minLength: 1
                required:
                  - success
              examples:
                ReactivateAnAccount:
                  value:
                    success: 'true'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-a-client_id-accounts-id-upgrade
      description: Reactivate a cancelled account.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/account_management/reactivate_account/reactivate_account.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/account_management/reactivate_account/reactivate_account.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/account_management/reactivate_account/reactivate_account.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/account_management/reactivate_account/reactivate_account.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/account_management/reactivate_account/reactivate_account.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
  '/a/{client_id}/accounts/{id}/revoke-all':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of an account for which to revoke all tokens.
    post:
      summary: Revoke All Tokens
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: string
                    minLength: 1
                required:
                  - success
              examples:
                RevokeAllTokensResponse:
                  value:
                    success: 'true'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                  type:
                    type: string
                    minLength: 1
                required:
                  - message
                  - type
              examples:
                example-1:
                  value:
                    message: No tokens found for that account id
                    type: api_error
      operationId: post-a-client_id-accounts-id-revoke-all
      description: |-
        Revoke all access tokens for an account.
        There are two ways to use this endpoint, you can revoke all access tokens, or pass in a access token you want to keep. 

        To revoke all access tokens, pass an empty body. 

        To keep access tokens, pass in a access token. 

        ```
        {
            "keep_access_token": "ACCESS_TOKEN"
        }
        ```
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/account_management/revoke_tokens/revoke_tokens.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/account_management/revoke_tokens/revoke_tokens.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/account_management/revoke_tokens/revoke_tokens.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/account_management/revoke_tokens/revoke_tokens.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/account_management/revoke_tokens/revoke_tokens.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                keep_access_token:
                  type: string
                  minLength: 1
                  description: Use this to keep an existing access token instead of deleting them all
            examples:
              RevokeAllTokensRequest:
                value:
                  keep_access_token: string
  '/a/{client_id}/ip_addresses':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client ID of your Nylas developer application.
    get:
      summary: Return Application IP Addresses
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  ip_addresses:
                    type: array
                    items: {}
                  updated_at:
                    type: number
                required:
                  - ip_addresses
                  - updated_at
              examples:
                ReturnApplicationIPAddressesResponse:
                  value:
                    ip_addresses:
                      - 52.25.153.17
                      - 52.26.120.161
                      - 52.39.252.208
                      - 54.71.62.98
                      - 34.208.138.149
                      - 52.88.199.110
                      - 54.69.11.122
                      - 54.149.110.158
                    updated_at: 1544658529
      operationId: get-a-client_id-ip_addresses
      description: |-
        Return application IP addresses. 

        > Paid Applications
        >
        > This endpoint can only be accessed by paid applications.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/account_management/ip_address/ip_address.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/account_management/ip_address/ip_address.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/account_management/ip_address/ip_address.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/account_management/ip_address/ip_address.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/account_management/ip_address/ip_address.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          description: ''
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
  '/a/{client_id}/accounts/{id}/token-info':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client_id of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The id of the account for which to return information.
    post:
      summary: Return Token Information
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  created_at:
                    type: number
                    description: Timestamp indicating when the access_token was created.
                    example: 1563496685
                  scopes:
                    type: string
                    minLength: 1
                    description: Which authentications scopes are allowed with this token. See authentication scopes for a list of possible scopes values.
                    example: 'calendar,email,contacts'
                  state:
                    type: string
                    minLength: 1
                    description: Can be valid or inactive. Using an inactive token will return an authorization error.
                    enum:
                      - invalid
                      - valid
                    example: valid
                  updated_at:
                    type: number
                    description: 'Timestamp indicating when the token object was updated, typically reflecting a change in the token''s state.'
                    example: 1563496685
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: No access_token passed.
                    type: api_error
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: No such token found for that account
                    type: api_error
      operationId: post-a-client_id-accounts-id-token-info
      description: Return information about an accounts access token.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/account_management/token_info/token_info.txt
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/account_management/token_info/token_info.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/account_management/token_info/token_info.txt
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                access_token:
                  type: string
                  minLength: 1
                  description: The account's access_token value that is returned during authentication.
              required:
                - access_token
            examples:
              ReturnTokenInformationResponse:
                value:
                  access_token: string
  '/a/{client_id}':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client_id of your Nylas developer application.
    get:
      summary: Return Application Details
      tags:
        - Application Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application-Details-Get'
              examples:
                ReturnApplicationDetailsResponse:
                  value:
                    application_name: Moon Indigo ✨
                    icon_url: 'https://inbox-developer-resources.s3.amazonaws.com/icons/da5b3a1c-448c-11e7-872b-0625ca014fd6'
                    redirect_uris:
                      - 'http://localhost:5555/login_callback'
                      - localhost
      operationId: get-a-client_id
      description: Return information about a Nylas application.
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
    post:
      summary: Update Application Details
      operationId: post-a-client_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application-Details-Get'
              examples:
                UpdateApplicationDetailsResponse:
                  value:
                    application_name: string
                    icon_url: 'https://inbox-developer-resources.s3.amazonaws.com/icons/da5b3a1c-448c-11e7-872b-0625ca014fd6'
                    redirect_uris:
                      - string
      description: Update application details.
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                application_name:
                  type: string
                  minLength: 1
                redirect_uris:
                  type: array
                  items:
                    type: string
              required:
                - application_name
                - redirect_uris
            examples:
              UpdateApplicationDetailsRequest:
                value:
                  application_name: My New App Name
                  redirect_uris:
                    - 'http://localhost:5555/login_callback'
                    - localhost
                    - 'https://customerA.myapplication.com/login_callback'
      tags:
        - Application Management
  /threads:
    get:
      summary: Returns All Threads
      tags:
        - Threads
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thread-Object'
              examples:
                ReturnAllThreadsResponse:
                  value:
                    - account_id: 1234***
                      draft_ids: []
                      first_message_timestamp: 1557950729
                      folders:
                        - display_name: Inbox
                          id: 4567****
                          name: inbox
                      has_attachments: false
                      id: 4312****
                      last_message_received_timestamp: 1557950729
                      last_message_sent_timestamp: 1557950729
                      last_message_timestamp: 1557950729
                      message_ids:
                        - 5634***
                      object: thread
                      participants:
                        - email: no-reply@cc.yahoo-inc.com
                          name: Yahoo
                        - email: james****@yahoo.com
                          name: James
                      snippet: 'Hi James, welcome.'
                      starred: false
                      subject: Security settings changed on your Yahoo account
                      unread: false
                      version: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-threads
      description: Returns one or more threads that match the filter specified by the query parameters.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/threads/get-threads/get-threads.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/threads/get-threads/get-threads.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/threads/get-threads/get-threads.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/threads/get-threads/get-threads.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/threads/get-threads/get-threads.java
      parameters:
        - schema:
            type: string
            enum:
              - ids
              - count
              - expanded
          in: query
          name: view
          description: 'Can be one of ids, count, or expanded. See Views for more information.'
        - schema:
            type: integer
            format: int32
            default: 100
          in: query
          name: limit
          description: 'The number of objects to return. Defaults to 100. If set too high, requests may fail to prevent excessively large response bodies.'
        - schema:
            type: integer
            format: int32
          in: query
          name: offset
          description: Zero-based offset from default object sorting. See pagination for more information
        - schema:
            type: string
          in: query
          name: subject
          description: Return threads with a matching literal subject.
        - schema:
            type: string
          in: query
          name: any_email
          description: 'Return threads that have been sent or received from this comma-separated list of email addresses. For example: mail1@mail.com,mail2@mail.com. A maximum of 25 emails may be specified.'
        - schema:
            type: string
          in: query
          name: to
          description: Return threads containing messages sent to this email address.
        - schema:
            type: string
          in: query
          name: from
          description: Return threads containing messages sent from this email address.
        - schema:
            type: string
          in: query
          name: cc
          description: Return threads containing messages that were CC'd to this email address.
        - schema:
            type: string
          in: query
          name: bcc
          description: 'Return threads containing messages that were BCC''d to this email address, likely sent from the parent account. (Most SMTP gateways remove BCC information.)'
        - schema:
            type: string
          in: query
          name: in
          description: 'Return threads in a given folder, or with a given label. This parameter supports the name, display_name, or id of a folder or label. To get all drafts, use the /drafts endpoint.'
        - schema:
            type: boolean
          in: query
          name: unread
          description: Return threads with one or more unread messages.
        - schema:
            type: string
          in: query
          name: starred
          description: Return threads with one or more starred messages.
        - schema:
            type: string
          in: query
          name: filename
          description: Return threads that contain attachments with the given filename.
        - schema:
            type: integer
            format: int32
          in: query
          name: last_message_before
          description: Return threads whose most recent message was received before this Unix-based timestamp.
        - schema:
            type: integer
            format: int32
          in: query
          name: last_message_after
          description: Return threads whose most recent message was received after this Unix-based timestamp.
        - schema:
            type: integer
            format: int32
          in: query
          description: Return threads whose first message was received before this Unix-based timestamp.
          name: started_before
        - schema:
            type: integer
            format: int32
          in: query
          description: Return threads whose first message was received after this Unix-based timestamp.
          name: started_after
      security:
        - ACCESS_TOKEN: []
  '/threads/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the thread to return.
    get:
      summary: Returns a Thread
      tags:
        - Threads
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread-Object'
              examples:
                ReturnAThreadResponse:
                  value:
                    account_id: 1234***
                    draft_ids: []
                    first_message_timestamp: 1557950729
                    folders:
                      - display_name: Inbox
                        id: 4567****
                        name: inbox
                    has_attachments: false
                    id: 4312****
                    last_message_received_timestamp: 1557950729
                    last_message_sent_timestamp: 1557950729
                    last_message_timestamp: 1557950729
                    message_ids:
                      - 5634***
                    object: thread
                    participants:
                      - email: no-reply@cc.yahoo-inc.com
                        name: Yahoo
                      - email: james****@yahoo.com
                        name: James
                    snippet: 'Hi James, welcome.'
                    starred: false
                    subject: Security settings changed on your Yahoo account
                    unread: false
                    version: 1
      operationId: get-threads-id
      description: Returns the thread by the specified thread ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/threads/get-threads-id/get-threads-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/threads/get-threads-id/get-threads-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/threads/get-threads-id/get-threads-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/threads/get-threads-id/get-threads-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/threads/get-threads-id/get-threads-id.java
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      security:
        - ACCESS_TOKEN: []
    put:
      summary: Update a Thread
      operationId: put-threads-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread-Object'
              examples:
                UpdateAThreadResponse:
                  value:
                    account_id: 6534****
                    draft_ids: []
                    first_message_timestamp: 1557950729
                    folders:
                      - display_name: Inbox
                        id: 3245****
                        name: inbox
                    has_attachments: false
                    id: 4312****
                    last_message_received_timestamp: 1557950729
                    last_message_sent_timestamp: 1557950729
                    last_message_timestamp: 1557950729
                    message_ids:
                      - 87567****
                    object: thread
                    participants:
                      - email: no-reply@cc.yahoo-inc.com
                        name: Yahoo
                      - email: james****@yahoo.com
                        name: James
                    snippet: 'Hi James, welcome.'
                    starred: false
                    subject: Security settings changed on your Yahoo account
                    unread: true
                    version: 2
      description: |-
        Update a thread by ID.

        When you update a thread, all message in a thread are updated.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/threads/put-threads-id/put-threads-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/threads/put-threads-id/put-threads-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/threads/put-threads-id/put-threads-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/threads/put-threads-id/put-threads-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/threads/put-threads-id/put-threads-id.java
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread-PUT'
            examples:
              UpdateAThreadRequest:
                value:
                  unread: true
                  starred: true
                  folder_id: string
                  label_ids:
                    - string
      tags:
        - Threads
      security:
        - ACCESS_TOKEN: []
  /messages:
    get:
      summary: Return All Messages
      tags:
        - Messages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message-Object'
              examples:
                ReturnAllMessageResponse:
                  value:
                    - account_id: 43jf****
                      bcc: []
                      body: |-
                        <html>
                        <head>
                         <meta charset="UTF-8">
                         <style type="text/css">
                         html {
                         -webkit-text-size-adjust:none;
                         }
                         body {
                         width:100%;
                         margin:0 auto;
                         padding:0;
                        }
                          p {
                         width:280px;
                         line-height: 16px;
                         letter-spacing: 0.5px;
                         }
                         </style>
                         <title>Welcome  ...  </html>
                      cc: []
                      date: 1557950729
                      events: []
                      files: []
                      folder:
                        display_name: Inbox
                        id: 7hcg****
                        name: inbox
                      from:
                        - email: no-reply@cc.yahoo-inc.com
                          name: Yahoo
                      id: 7a8939****
                      object: message
                      reply_to:
                        - email: no-reply@cc.yahoo-inc.com
                          name: Yahoo
                      snippet: 'Hi James, james****@yahoo.com. Welcome.'
                      starred: false
                      subject: Welcome
                      thread_id: cvsp****
                      to:
                        - email: james****@yahoo.com
                          name: ''
                      unread: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-messages
      description: Returns all messages. Use the query parameters to filter the data.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/message/get-messages/get-message.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/message/get-messages/get-message.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/message/get-messages/get-message.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/message/get-messages/get-message.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/message/get-messages/get-message.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            enum:
              - ids
              - count
              - expanded
          in: query
          name: view
          description: 'Can be one of ids, count, or expanded. See Views for more information.'
        - schema:
            type: integer
            format: int32
          in: query
          name: limit
          description: 'The number of objects to return. Defaults to 100. If set too high, requests may fail to prevent excessively large response bodies.'
        - schema:
            type: integer
            format: int32
          in: query
          name: offset
          description: The zero-based offset for the default object sorting. See pagination for more information.
        - schema:
            type: string
          in: query
          name: subject
          description: Return messages with a matching literal subject.
        - schema:
            type: string
          in: query
          name: any_email
          description: 'Return threads that have been sent or received from this comma-separated list of email addresses. For example: mail1@mail.com,mail2@mail.com. A maximum of 25 emails may be specified.'
        - schema:
            type: string
          in: query
          name: to
          description: Return messages sent to this email address.
        - schema:
            type: string
          in: query
          name: from
          description: Return messages sent from this email address.
        - schema:
            type: string
          in: query
          name: cc
          description: Return messages that were CC'd to this email address.
        - schema:
            type: string
          in: query
          name: bcc
          description: 'Return messages that were BCC''d to this email address, likely sent from the parent account. (Most SMTP gateways remove BCC information.)'
        - schema:
            type: string
            enum:
              - name
              - display_name
              - id
          in: query
          name: in
          description: 'Return messages in a given folder, or with a given label. This parameter supports the name, display_name, or id of a folder or label. Note: If you''d like to get all drafts, use the /drafts endpoint.'
        - schema:
            type: boolean
          in: query
          name: unread
          description: Return unread messages
        - schema:
            type: string
          in: query
          name: starred
          description: Return starred messages.
        - schema:
            type: string
          in: query
          name: filename
          description: Return messages that contain attachments with the given filename.
        - schema:
            type: string
          in: query
          name: thread_id
          description: Return messages belonging to a specific thread.
        - schema:
            type: string
          in: query
          name: recieved_before
          description: Return messages received before this unix timestamp.
        - schema:
            type: string
          in: query
          name: recieved_after
          description: Return messages received after this unix timestamp.
        - schema:
            type: boolean
            default: true
          in: query
          name: has_attachment
          description: Return only messages that have attachments (only true is supported).
  '/messages/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of the message
    get:
      summary: Return a Message
      tags:
        - Messages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message-Object'
              examples:
                ReturnAMessageResponse:
                  value:
                    account_id: string
                    bcc:
                      - {}
                    body: string
                    cc:
                      - {}
                    date: 0
                    events:
                      - {}
                    files:
                      - {}
                    folder:
                      display_name: string
                      id: string
                      name: string
                    from:
                      - email: string
                        name: string
                    id: string
                    object: message
                    reply_to:
                      - email: string
                        name: string
                    snippet: string
                    starred: true
                    subject: string
                    thread_id: string
                    to:
                      - email: string
                        name: string
                    unread: true
                    labels:
                      - string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-messages-id
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
            enum:
              - message/rfc822
              - application/json
          in: header
          name: Accept
          description: Set the accept header to `message/rfc822`to return the raw message contents.
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      description: "Returns a message by ID.\n\n**Raw Message Contents**\n\nYou can also return the raw message content by setting the Accept header to `message/rfc822`. This will return the message in [RFC 2822 format](https://www.ietf.org/rfc/rfc2822.txt), including all MIME body subtypes and attachments.\n\n```\ncurl -X GET 'https://api.nylas.com/messages/{message_id}' \\\n-H 'Accept: message/rfc822' \\\n-H 'Authorization: Bearer ACCESS_TOKEN'\n```\n\n```\nX-Apparently-To: james****@yahoo.com; Wed, 15 May 2019 20:05:29 +0000\nReturn-Path: <accounts@returns.bulk.yahoo.com>\nReceived-SPF: pass (domain of returns.bulk.yahoo.com designates **.***.**.** as permitted sender)\nX-YMailISG: _O6mSNY****\nX-Originating-IP: [**.**.**.**]\nAuthentication-Results: ***.mail.ne1.yahoo.com \n header.i=@cc.yahoo-inc.com; header.s=fz2048; dkim=pass (ok)\nReceived: from 127.0.0.1  (EHLO ***.****.mail.gq1.yahoo.com) (**.***.**.**)\n  by ***.mail.ne1.yahoo.com with SMTPS; Wed, 15 May 2019 20:05:28 +0000\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=cc.yahoo-inc.com; s=***; t=155****; bh=hXsR****; h=Date:From:Reply-To:To:Subject:From:Subject; b=LI39rKBTkhJNCz9Gl****A==\nReceived: from ****.***.mail.ne1.yahoo.com by ****.***.mail.gq1.yahoo.com with HTTP; Wed, 15 May 2019 20:05:27 +0000\nDate: Wed, 15 May 2019 20:05:23 +0000 (UTC)\nFrom: Yahoo <no-reply@cc.yahoo-inc.com>\nReply-To: Yahoo <no-reply@cc.yahoo-inc.com>\nTo: james****@yahoo.com\nMessage-ID: <1939****.****.15579****@****.member.gq1.yahoo.com>\nSubject: Welcome\nMIME-Version: 1.0\nContent-Type: text/html; charset=\"utf-8\"\nContent-Transfer-Encoding: 7bit\nContent-Length: 7282\n\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style type=\"text/css\">\n        html {\n        -webkit-text-size-adjust:none;\n        }\n        body {\n        width:100%;\n        margin:0 auto;\n        padding:0;\n        }\n        p {\n        width:280px;\n        line-height: 16px;\n        letter-spacing: 0.5px;\n        }\n    </style>\n    <title>Welcome</title>\n    </head>\n<body style=\"font-family:Helvetica Neue;\">\n\n\t...\n\n</body>\n</html>\n```"
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/message/get-message-id/get-message-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/message/get-message-id/get-message-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/message/get-message-id/get-message-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/message/get-message-id/get-message.id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/message/get-message-id/get-message-id.java
    put:
      summary: Update a Message
      tags:
        - Messages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message-Object'
              examples:
                UpdateAMessageResponse:
                  value:
                    account_id: 43jf3****
                    bcc: []
                    body: |-
                      <html>
                      <head>
                       <meta charset="UTF-8">
                       <style type="text/css">
                       html {
                       -webkit-text-size-adjust:none;
                       }
                       body {
                       width:100%;
                       margin:0 auto;
                       padding:0;
                       }
                       p {
                              width:280px;
                              line-height: 16px;
                       letter-spacing: 0.5px;
                       }
                       </style>
                       <title>Welcome</title>
                        ... </html>
                    cc: []
                    date: 1557950729
                    events: []
                    files: []
                    folder:
                      display_name: Inbox
                      id: 7hcg****
                      name: inbox
                    from:
                      - email: no-reply@cc.yahoo-inc.com
                        name: Yahoo
                    id: 7a8939****
                    object: message
                    reply_to:
                      - email: no-reply@cc.yahoo-inc.com
                        name: Yahoo
                    snippet: 'Hi James, james****@yahoo.com Welcome.'
                    starred: false
                    subject: Welcome to...
                    thread_id: cvsppk****
                    to:
                      - email: james****@yahoo.com
                        name: ''
                    unread: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: put-messages-id
      description: Update a message by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/message/put-message-id/put-message-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/message/put-message-id/put-message-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/message/put-message-id/put-message-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/message/put-message-id/put-message-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/message/put-message-id/put-message-id.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message-PUT'
            examples:
              UpdateAMessageRequest:
                value:
                  unread: true
                  starred: true
                  folder_id: string
                  label_ids:
                    - string
  /labels:
    get:
      summary: Return All Labels
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Labels-Object'
              examples:
                ReturnAllLabelsResponse:
                  value:
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: All Mail
                      id: 12r72ur7rojisrmjp5xzau8xs
                      name: all
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Drafts
                      id: cqb6hnxsx4ihy864he04r5t38
                      name: drafts
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Spam
                      id: 93c69s6ekyqsnfq9ujiq9f63b
                      name: spam
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Important
                      id: 7x5r0j00n2ihffpdrg6kuh06h
                      name: important
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Inbox
                      id: 9jg5lbc2u95jeguxr0gxw1mp5
                      name: inbox
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Trash
                      id: 6p7mt7zoygqbgv0p6hnr3876o
                      name: trash
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Sent Mail
                      id: ertg5obp5nvn43xtqe2e55en0
                      name: sent
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: keep
                      id: eluc9ishugbda9egbmtkkc934
                      name: 'null'
                      object: label
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-labels
      description: Returns all labels.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/labels/get-labels/get-labels.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/labels/get-labels/get-labels.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/labels/get-labels/get-labels.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/labels/get-labels/get-labels.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/labels/get-labels/get-labels.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
          required: true
        - schema:
            type: string
          in: query
          name: limit
          description: 'The number of objects to return. This value often defaults to 100. If set too high, requests may fail to prevent excessively large response bodies.'
        - schema:
            type: string
          in: query
          name: offset
          description: A zero-based offset from the default object sorting.
    post:
      summary: Create a Label
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Labels-Object'
              examples:
                CreateALabelResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    display_name: keep
                    id: eluc9ishugbda9egbmtkkc934
                    name: 'null'
                    object: label
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-labels
      description: Creates a new label.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/labels/create-labels/create-labels.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/labels/create-labels/create-labels.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/labels/create-labels/create-labels.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/labels/create-labels/create-labels.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/labels/create-labels/create-labels.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                display_name:
                  type: string
                  minLength: 1
              required:
                - display_name
            examples:
              CreateALabelRequest:
                value:
                  display_name: string
  '/labels/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Label ID
    get:
      summary: Return a Label
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Labels-Object'
              examples:
                ReturnALabelResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    display_name: keep
                    id: eluc9ishugbda9egbmtkkc934
                    name: 'null'
                    object: label
      operationId: get-labels-id
      description: Return a label by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/labels/get-labels-id/get-labels-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/labels/get-labels-id/get-labels-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/labels/get-labels-id/get-labels-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/labels/get-labels-id/get-labels-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/labels/get-labels-id/get-labels-id.js
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
    put:
      summary: Update a Label
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Labels-Object'
              examples:
                UpdateALabelResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    display_name: keep
                    id: eluc9ishugbda9egbmtkkc934
                    name: 'null'
                    object: label
      operationId: put-labels-id
      description: Updates an existing label.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/labels/update-labels-id/update-labels-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/labels/update-labels-id/update-labels-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/labels/update-labels-id/update-labels-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/labels/update-labels-id/update-labels-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/labels/update-labels-id/update-labels-id.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                display_name:
                  type: string
                  minLength: 1
                  description: The human-readable name for the new label.
              required:
                - display_name
            examples:
              UpdateALabelRequest:
                value:
                  display_name: string
        description: ''
    delete:
      summary: Delete a Label
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  job_status_id:
                    type: string
                    minLength: 1
                    description: Use the ID to query the status of deleting the label. See Job Status.
              examples:
                DeleteALabelResponse:
                  value:
                    job_status_id: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: delete-labels-id
      description: Deletes a label.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/labels/delete-labels-id/delete-labels-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/labels/delete-labels-id/delete-labels-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/labels/delete-labels-id/delete-labels-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/labels/delete-labels-id/delete_labels_id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/labels/delete-labels-id/delete_labels_id.java
  /drafts:
    get:
      summary: Return All Drafts
      tags:
        - Drafts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Drafts'
              examples:
                ReturnAllDraftsResponse:
                  value:
                    - account_id: 43jf3n4***
                      bcc: []
                      body: 'Hello, how are you?'
                      cc: []
                      date: 1559763005
                      events: []
                      files: []
                      folder: {}
                      from:
                        - email: nylastest***@yahoo.com
                          name: John Doe
                      id: 43vfrmdu1***
                      object: draft
                      reply_to: []
                      reply_to_message_id: 43jf3n4***
                      snippet: 'Hello, how are you?'
                      starred: false
                      subject: ugh?
                      thread_id: 46wnzkxa***
                      to:
                        - email: '{{email}}'
                          name: '{{name}}'
                      unread: false
                      version: 0
                    - account_id: 43jf3n4***
                      bcc: []
                      body: 'Hello, how are you?'
                      cc: []
                      date: 1559762902
                      events: []
                      files: []
                      folder:
                        display_name: Draft
                        id: eeangfw9vm***
                        name: drafts
                      from:
                        - email: nylastest***@yahoo.com
                          name: John Doe
                      id: 92c7gucghzh***
                      object: draft
                      reply_to: []
                      reply_to_message_id: 43jf3n4***
                      snippet: 'Hello, how are you?'
                      starred: false
                      subject: Hello
                      thread_id: e48pmw615r2****
                      to:
                        - email: '{{email}}'
                          name: '{{name}}'
                      unread: false
                      version: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-drafts
      description: Returns all drafts.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/drafts/get-drafts/get-drafts.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/drafts/get-drafts/get-drafts.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/drafts/get-drafts/get-drafts.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/drafts/get-drafts/get-drafts.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/drafts/get-drafts/get-drafts.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
          in: query
          name: any_email
          description: 'Return drafts that have been sent or received from this comma-separated list of email addresses. For example: mail1@mail.com,mail2@mail.com. A maximum of 25 emails may be specified.'
    post:
      summary: Create a New Draft
      tags:
        - Drafts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drafts'
              examples:
                CreateNewDraftResponse:
                  value:
                    account_id: string
                    bcc:
                      - name: string
                        email: string
                    body: string
                    cc:
                      - name: string
                        email: string
                    date: 0
                    events:
                      - {}
                    files:
                      - {}
                    from:
                      - email: string
                        name: string
                    id: string
                    labels:
                      - display_name: string
                        id: string
                        name: string
                    object: draft
                    reply_to:
                      - {}
                    reply_to_message_id: string
                    snippet: string
                    starred: true
                    subject: string
                    thread_id: string
                    to:
                      - email: string
                        name: string
                    unread: true
                    version: 0
                    folder:
                      display_name: string
                      id: string
                      name: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
      operationId: post-drafts
      description: Creates a new draft
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/drafts/create-draft/create-draft.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/drafts/create-draft/create-draft.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/drafts/create-draft/create-draft.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/drafts/create-draft/create-draft.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/drafts/create-draft/create-draft.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Draft-Create'
            examples:
              CreateNewDraftRequest:
                value:
                  subject: From Nylas
                  to:
                    - email: swag@nylas.com
                      name: Nylas
                  cc:
                    - name: string
                      email: string
                  bcc:
                    - name: string
                      email: string
                  from:
                    - name: you@example.com
                      email: Your Name
                  reply_to:
                    - name: Nylas
                      email: swag@nylas.com
                  reply_to_message_id: string
                  body: 'This email was sent using the Nylas email API. Visit https://nylas.com for details.'
                  file_ids:
                    - string
  '/drafts/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of the draft.
    get:
      summary: Return a Draft
      tags:
        - Drafts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drafts'
              examples:
                ReturnADraftResponse:
                  value:
                    account_id: string
                    bcc:
                      - name: string
                        email: string
                    body: string
                    cc:
                      - name: string
                        email: string
                    date: 0
                    events:
                      - {}
                    files:
                      - {}
                    from:
                      - email: string
                        name: string
                    id: string
                    labels:
                      - display_name: string
                        id: string
                        name: string
                    object: draft
                    reply_to:
                      - {}
                    reply_to_message_id: string
                    snippet: string
                    starred: true
                    subject: string
                    thread_id: string
                    to:
                      - email: string
                        name: string
                    unread: true
                    version: 0
                    folder:
                      display_name: string
                      id: string
                      name: string
      operationId: get-drafts-id
      description: Returns a draft by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/drafts/get-drafts-id/get-drafts-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/drafts/get-drafts-id/get-drafts-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/drafts/get-drafts-id/get-drafts-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/drafts/get-drafts-id/get-drafts-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/drafts/get-drafts-id/get-drafts-id.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
    put:
      summary: Update a Draft
      tags:
        - Drafts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drafts'
              examples:
                UpdateADraftResponse:
                  value:
                    account_id: string
                    bcc:
                      - name: string
                        email: string
                    body: string
                    cc:
                      - name: string
                        email: string
                    date: 0
                    events:
                      - {}
                    files:
                      - {}
                    from:
                      - email: string
                        name: string
                    id: string
                    labels:
                      - display_name: string
                        id: string
                        name: string
                    object: draft
                    reply_to:
                      - email: nylastest***@yahoo.com
                        name: John Doe
                    reply_to_message_id: string
                    snippet: string
                    starred: true
                    subject: string
                    thread_id: string
                    to:
                      - email: string
                        name: string
                    unread: true
                    version: 0
                    folder:
                      display_name: string
                      id: string
                      name: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: put-drafts-id
      description: Updates an existing draft by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/drafts/update-draft-id/update-draft-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/drafts/update-draft-id/update-draft-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/drafts/update-draft-id/update-draft-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/drafts/update-draft-id/update-draft-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/drafts/update-draft-id/update-draft-id.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Draft-Update'
            examples:
              UpdateADraftRequest:
                value:
                  subject: From Nylas
                  to:
                    - email: swag@nylas.com
                      name: Nylas
                  cc:
                    - name: string
                      email: string
                  bcc:
                    - name: string
                      email: string
                  from:
                    - name: you@example.com
                      email: Your Name
                  reply_to:
                    - name: Nylas
                      email: swag@nylas.com
                  reply_to_message_id: string
                  body: 'This email was sent using the Nylas email API. Visit https://nylas.com for details.'
                  file_ids:
                    - string
    delete:
      summary: Delete a Draft
      tags:
        - Drafts
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: delete-drafts-id
      description: Deletes a draft by ID. The draft version must be specified otherwise it will return an error.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/drafts/delete-draft-id/delete-draft-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/drafts/delete-draft-id/delete-draft-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/drafts/delete-draft-id/delete-draft-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/drafts/delete-draft-id/delete-draft-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/drafts/delete-draft-id/delete-draft-id.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                version:
                  type: number
                  description: Version of the draft that you are modifying.
              required:
                - version
            examples:
              DeleteADraftRequest:
                value:
                  version: 0
  /send#drafts:
    post:
      summary: Send a Draft
      tags:
        - Sending
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message-Object'
              examples:
                SendADraftResponse:
                  value:
                    account_id: string
                    bcc:
                      - {}
                    body: string
                    cc:
                      - {}
                    date: 0
                    events:
                      - {}
                    files:
                      - {}
                    folder:
                      display_name: string
                      id: string
                      name: string
                    from:
                      - email: string
                        name: string
                    id: string
                    object: message
                    reply_to:
                      - email: string
                        name: string
                    snippet: string
                    starred: true
                    subject: string
                    thread_id: string
                    to:
                      - email: string
                        name: string
                    unread: true
                    labels:
                      - string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-send#drafts
      description: Send an existing draft.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/sending/sending-drafts/sending-drafts.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/sending/sending-drafts/sending-drafts.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/sending/sending-drafts/sending-drafts.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/sending/sending-drafts/sending-drafts.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/sending/sending-drafts/sending-drafts.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                draft_id:
                  type: string
                  minLength: 1
                  description: ID of the existing draft.
                  example: 8p8vg2elbbo98kkqyd4zwoi7p
                version:
                  type: number
                  description: The version of the draft. This must be the most recent version or the request will fail.
                  example: 0
                tracking:
                  type: object
                  properties:
                    links:
                      type: boolean
                      description: True enables link tracking.
                    opens:
                      type: boolean
                      description: True enables message open tracking.
                    thread_replies:
                      type: boolean
                      description: True enables thread reply tracking.
                    payload:
                      type: string
                      minLength: 1
                      description: An optional string that allows you to keep track of additional information. This string will be included in the webhook notification.
                      example: Any string
              required:
                - draft_id
                - version
            examples:
              SendADraftRequest:
                value:
                  draft_id: 8p8vg2elbbo98kkqyd4zwoi7p
                  version: 0
                  tracking:
                    links: true
                    opens: true
                    thread_replies: true
                    payload: Any string
  /send#directly:
    post:
      summary: Send Directly
      tags:
        - Sending
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message-Object'
              examples:
                SendDirectlyResponse:
                  value:
                    account_id: 43jf3n4***
                    bcc: []
                    body: Sounds great! See you then.
                    cc: []
                    date: 1559772028
                    events: []
                    files: []
                    folder: {}
                    from:
                      - email: nylastest***@yahoo.com
                        name: John Doe
                    id: 2poq0fz6***
                    object: message
                    reply_to:
                      - email: nylastest***@yahoo.com
                        name: John Doe
                    snippet: Sounds great! See you then.
                    starred: false
                    subject: 'Re: Meeting'
                    thread_id: cvsppkteox***
                    to:
                      - email: no-reply@cc.yahoo-inc.com
                        name: '{{name}}'
                    unread: false
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-send#directly
      description: Send a message without saving it as a draft.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/sending/send-directly/send-directly.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/sending/send-directly/send-directly.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/sending/send-directly/send-directly.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/sending/send-directly/send-directly.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/sending/send-directly/send-directly.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/jso
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Draft-Create'
            examples:
              SendDirectlyRequest:
                value:
                  subject: From Nylas
                  to:
                    - email: swag@nylas.com
                      name: Nylas
                  cc:
                    - name: string
                      email: string
                  bcc:
                    - name: string
                      email: string
                  from:
                    - name: you@example.com
                      email: Your Name
                  reply_to:
                    - name: Nylas
                      email: swag@nylas.com
                  reply_to_message_id: string
                  body: 'This email was sent using the Nylas email API. Visit https://nylas.com for details.'
                  file_ids:
                    - string
        description: ''
  /send:
    post:
      summary: Send Raw MIME
      tags:
        - Sending
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message-Object'
              examples:
                SendRawMimeResponse:
                  value:
                    account_id: 43jf3n4***
                    bcc: []
                    body: Sounds great! See you then.
                    cc: []
                    date: 1559772028
                    events: []
                    files: []
                    folder: {}
                    from:
                      - email: nylastest***@yahoo.com
                        name: John Doe
                    id: 2poq0fz6***
                    object: message
                    reply_to:
                      - email: nylastest***@yahoo.com
                        name: John Doe
                    snippet: Sounds great! See you then.
                    starred: false
                    subject: 'Re: Meeting'
                    thread_id: cvsppkteox***
                    to:
                      - email: no-reply@cc.yahoo-inc.com
                        name: '{{name}}'
                    unread: false
      operationId: post-send#raw
      description: |
        Sends a raw MIME message.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/sending/send-mime/send-mime.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/sending/send-mime/send-mime.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/sending/send-mime/send-mime.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/sending/send-mime/send-mime.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/sending/send-mime/send-mime.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: message/rfc822
          in: header
          name: Content-Type
        - schema:
            type: string
            default: '1.0'
          in: header
          name: MIME-Version
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            examples:
              SendRawMimRequest:
                value: |-
                  curl -X POST 'https://api.nylas.com/send' \
                  -H 'Content-Type: message/rfc822' \
                  -H 'Authorization: Bearer ACCESS_TOKEN' \
                  -d 'MIME-Version: 1.0
                  Content-Type: text/plain; charset=UTF-8
                  In-Reply-To: <84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>
                  References: <84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>
                  Subject: With Love, From Nylas
                  From: You <you@example.com>
                  To: My Nylas Friend <swag@nylas.com>

                  This email was sent via raw MIME using the Nylas email API. Visit https://nylas.com for details.'
        description: |-
          ```
          curl -X POST 'https://api.nylas.com/send' \
          -H 'Content-Type: message/rfc822' \
          -H 'Authorization: Bearer ACCESS_TOKEN' \
          -d 'MIME-Version: 1.0
          Content-Type: text/plain; charset=UTF-8
          In-Reply-To: <84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>
          References: <84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>
          Subject: With Love, From Nylas
          From: You <you@example.com>
          To: My Nylas Friend <swag@nylas.com>

          This email was sent via raw MIME using the Nylas email API. Visit https://nylas.com for details.'
          ```
    parameters: []
  /files:
    get:
      summary: Return All Files
      tags:
        - Files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File-Object'
              examples:
                ReturnAllFilesResponse:
                  value:
                    - account_id: 43jf3n4es3***
                      content_type: image/jpeg
                      filename: image.jpg
                      id: 9etjh6talp***
                      object: file
                      size: 72379
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-files
      description: Returns information about each files metadata.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/files/get-files/get-files.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/files/get-files/get-files.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/files/get-files/get-files.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/files/get-files/get-files.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/files/get-files/get-files.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
          in: query
          name: filename
          description: Return files that match the specified file name.
        - schema:
            type: string
          in: query
          name: message_id
          description: Return files matching the specified message ID.
        - schema:
            type: string
          in: query
          description: Return files matching the specified content type.
          name: content_type
        - schema:
            type: string
            enum:
              - count
              - ids
          in: query
          name: view
          description: Return files matching the specified count or ids. See Views for more info.
    post:
      summary: Upload a New File
      tags:
        - Files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File-Object'
              examples:
                UploadAFileResponse:
                  value:
                    - account_id: 43jf3n4es3***
                      content_type: image/jpeg
                      filename: image.jpg
                      id: 9etjh6talp***
                      object: file
                      size: 72379
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-files
      description: Uploads a new file.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/files/upload-files/upload-files.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/files/upload-files/upload-files.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/files/upload-files/upload-files.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/files/upload-files/upload-files.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/files/upload-files/upload-files.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: The file to upload. Upload size limit is ~25 MB.
                  format: binary
            examples:
              UploadAFileRequest:
                value:
                  file: string
  '/files/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The file ID.
    get:
      summary: Returns a File
      tags:
        - Files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File-Object'
              examples:
                ReturnsAFileResponse:
                  value:
                    account_id: 43jf3n4es3***
                    content_type: image/jpeg
                    filename: image.jpg
                    id: 9etjh6talp***
                    object: file
                    size: 72379
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-files-id
      description: Returns file metadata by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/files/get-files-id/get-files-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/files/get-files-id/get-files-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/files/get-files-id/get-files-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/files/get-files-id/get-files-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/files/get-files-id/get-files-id.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
    delete:
      summary: Delete a File
      tags:
        - Files
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: delete-files-id
      description: Deletes a file by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/files/delete-files/delete-files.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/files/delete-files/delete-files.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/files/delete-files/delete-files.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/files/delete-files/delete-files.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/files/delete-files/delete-files.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  '/files/{id}/download':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The file ID
    get:
      summary: Download a File
      tags:
        - Files
      responses:
        '200':
          description: OK. Response will return file data for download.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-files-id-download
      description: Download a file.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/files/download-files/download-files.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/files/download-files/download-files.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/files/download-files/download-files.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/files/download-files/download-files.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/files/download-files/download-files.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  /calendar:
    get:
      summary: Return All Calendars
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Calendar'
              examples:
                ReturnAllCalendarsResponse:
                  value:
                    - description: Events
                      id: 67qmz3fuk9wf***
                      name: Calendar
                      account_id: bh1vu31mw9ap***
                      object: calendar
                      read_only: false
                    - description: Emailed events
                      id: b4xm1jjibrxky***
                      name: Emailed events
                      account_id: bh1vu31mw9a***
                      object: calendar
                      read_only: true
      operationId: get-calendar
      description: Returns all calendars.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/calendar/get-calendars/get-calendar.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/calendar/get-calendars/get-calendar.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/calendar/get-calendars/get-calendar.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/calendar/get-calendars/get-calendar.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/calendar/get-calendars/get-calendar.java
      parameters:
        - schema:
            type: string
            enum:
              - count
              - ids
          in: query
          name: view
          description: Return calendars matching the specified view. Value can be count or ids. Reference Views for more info.
        - schema:
            type: string
            nullable: true
          in: query
          name: limt
          description: Return calendars with a specified result limit. Reference Pagination for additional details.
        - schema:
            type: string
          in: query
          name: offset
          description: Return calendars matching the specified result pagination offset. See Pagination for additional details.
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      security:
        - ACCESS_TOKEN: []
    post:
      summary: Create a Calendar
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar-Create-Update-Response'
              examples:
                CreateACalendarResponse:
                  value:
                    account_id: eof2wrhqkl7kdwhy9hylpv9o9
                    description: Description of my new calendar
                    id: 8e570s302fdazx9zqwiuk9jqn
                    is_primary: true
                    job_status_id: 48pp6ijzrxpw9jors9ylnsxnf
                    location: Location description
                    name: My New Calendar
                    object: calendar
                    read_only: true
                    timezone: America/Los_Angeles
      operationId: post-calendar
      description: |
        Create a calendar.

        When making modifications to calendar objects, Nylas exposes a Job Status that represents whether the action has synced back to the provider or not.

        > Support
        >
        > Creating calendars is currently only supported for Gmail and GSuite account types.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/calendar/create-calendar/create-calendar.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/calendar/create-calendar/create-calendar.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/calendar/create-calendar/create-calendar.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/calendar/create-calendar/create-calendar.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/calendar/create-calendar/create-calendar.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calendar-Create'
            examples:
              CreateCalendarRequest:
                value:
                  name: My New Calendar
                  description: Description of my new calendar
                  location: Location description
                  timezone: America/Los_Angeles
  '/calendar/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the calendar.
    get:
      summary: Return A Calendar
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
              examples:
                ReturnACalendarResponse:
                  value:
                    description: Emailed events
                    id: 67qmz3fuk9wf***
                    name: Calendar
                    account_id: bh1vu31mw9ap***
                    object: calendar
                    read_only: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-calendar-id
      description: Returns a calendar by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/calendar/get-calendar-id/get-calendar-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/calendar/get-calendar-id/get-calendar-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/calendar/get-calendar-id/get-calendar-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/calendar/get-calendar-id/get-calendar-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/calendar/get-calendar-id/get-calendar-id.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
    put:
      summary: Update A Calendar
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar-Create-Update-Response'
              examples:
                UpdateACalendarResponse:
                  value:
                    account_id: eof2wrhqkl7kdwhy9hylpv9o9
                    description: Description of my new calendar
                    id: 8e570s302fdazx9zqwiuk9jqn
                    is_primary: true
                    job_status_id: 48pp6ijzrxpw9jors9ylnsxnf
                    location: Location description
                    name: My New Calendar
                    object: calendar
                    read_only: true
                    timezone: America/Los_Angeles
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: put-calendar-id
      description: Updates a calendar.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/calendar/update-calendar/update-calendar.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/calendar/update-calendar/update-calendar.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/calendar/update-calendar/update-calendar.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/calendar/update-calendar/update-calendar.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/calendar/update-calendar/update-calendar.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calendar-Create'
            examples:
              UpdateACalendarRequest:
                value:
                  name: My New Calendar
                  description: Description of my new calendar
                  location: Location description
                  timezone: America/Los_Angeles
    delete:
      summary: Delete a Calendar
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  job_status_id:
                    type: string
                    minLength: 1
                required:
                  - job_status_id
              examples:
                DeleteACalenderResponse:
                  value:
                    job_status_id: d38mgop88je0agkqrf03sw0sw
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: delete-calendar-id
      description: Deletes a calendar
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/calendar/delete-calendar/delete-calendar.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/calendar/delete-calendar/delete-calendar.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/calendar/delete-calendar/delete-calendar.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/calendar/delete-calendar/delete-calendar.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/calendar/delete-calendar/delete-calendar.java
  /calendars/free-busy:
    post:
      summary: Calendar Free or Busy
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                items:
                  type: object
                  description: ''
                  properties:
                    object:
                      type: string
                      minLength: 1
                      example: free_busy
                    email:
                      type: string
                      minLength: 1
                      example: swag@nylas.com
                    time_slots:
                      type: array
                      uniqueItems: true
                      minItems: 1
                      items:
                        type: object
                        properties:
                          object:
                            type: string
                            minLength: 1
                            example: time_slot
                          status:
                            type: string
                            minLength: 1
                            example: busy
                          start_time:
                            type: number
                            example: 1409594400
                          end_time:
                            type: number
                            example: 1409599000
              examples:
                CalendarFreeBusyResponse:
                  value:
                    - object: free_busy
                      email: swag@nylas.com
                      time_slots:
                        - object: time_slot
                          status: busy
                          start_time: 1409594400
                          end_time: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-calendars-free-busy
      description: |-
        Check calendar free or busy status.

        The `/calendars/free-busy` endpoint lets you look for availability without accessing sensitive information such as titles, descriptions, or locations.

        ## Scopes
        * calendar
        * calendar.read_only

        You need to pass in the account access token of the calender you want to check.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/calendar/free-busy/free-busy.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/calendar/free-busy/free-busy.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/calendar/free-busy/free-busy.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/calendar/free-busy/free-busy.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/calendar/free-busy/free-busy.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_time:
                  type: string
                  description: Unix timestamp for the beginning of the freebusy window.
                  example: '1409594400'
                end_time:
                  type: string
                  description: Unix timestamp for the end of the freebusy window.
                  example: '1409598000'
                emails:
                  type: array
                  description: The email to check freebusy times for. You can only check one email at a time.
                  items:
                    type: string
                    format: email
                    example: nyla@nylas.com
              required:
                - start_time
                - end_time
                - emails
            examples:
              CalendarFreeBusyRequest:
                value:
                  start_time: '1409594400'
                  end_time: '1409598000'
                  emails:
                    - nyla@nylas.com
        description: ''
  /events:
    get:
      summary: Return All Events
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Events'
              examples:
                ReturnAllEventsResponse:
                  value:
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      busy: true
                      calendar_id: 947kpa7ih22bfkeujpkfqn5bf
                      description: coffee meeting
                      ical_uid: 5i2voruhvks4pbt5ktngk28bc9@google.com
                      id: 4t0kwb4qb6xr0pfzzook70nd8
                      location: null
                      message_id: null
                      object: event
                      owner: <some_email@email.com>
                      participants:
                        - comment: null
                          email: email@email.com
                          name: null
                          status: noreply
                      read_only: true
                      title: 'Remote Event: Group Yoga Class'
                      when:
                        object: time
                        time: 1408875644
                      status: confirmed
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-events
      description: |-
        Returns all events.

        > Sorting
        > 
        > Events are always sorted by their start date.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/events/get-events/get-events.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/events/get-events/get-events.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/events/get-events/get-events.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/events/get-events/get-events.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/events/get-events/get-events.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Access
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: boolean
          in: query
          name: expand_recurring
          description: 'Return events matching the specified recurrence. If the recurrence is true, the results will expand single recurring events into individual event instances that fall within the requested time range.'
        - schema:
            type: boolean
          in: query
          name: show_cancelled
          description: 'Return events matching the specified cancellation. If the cancellation is true, the results will include cancelled events. This is set to false by default.'
        - schema:
            type: integer
            format: int32
          in: query
          name: limt
          description: 'Return events matching the specified limit. This value often defaults to 100. If the value is set too high, the request may fail to prevent excessively large response bodies. See Pagination for additional info.'
        - schema:
            type: integer
            format: int32
          in: query
          name: offset
          description: Return events matching the specified offset. This is zero-based offset from default object sorting. See Pagination for additional info.
        - schema:
            type: string
          in: query
          name: event_id
          description: Return the event matching the specified event ID.
        - schema:
            type: string
          in: query
          name: calendar_id
          description: Return events belonging to the specified calendar ID.
        - schema:
            type: string
          in: query
          name: title
          description: Return events matching the specified title.
        - schema:
            type: string
          in: query
          name: description
          description: Return events matching the specified description.
        - schema:
            type: string
          in: query
          name: location
          description: Return events matching the specified location.
        - schema:
            type: integer
            format: int32
          in: query
          name: starts_before
          description: Return events starting before the specified unix timestamp.
        - schema:
            type: integer
            format: int32
          in: query
          description: Return events starting after the specified unix timestamp.
          name: starts_after
        - schema:
            type: integer
            format: int32
          in: query
          name: ends_before
          description: Return events ending before the specified unix timestamp.
        - schema:
            type: integer
            format: int32
          in: query
          name: ends_after
          description: Return events ending after the specified unix timestamp.
    post:
      summary: Create an Event
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                CreateAnEventResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    busy: true
                    calendar_id: 947kpa7ih22bfkeujpkfqn5bf
                    description: Coffee meeting
                    ical_uid: 5i2voruhvks4pbt5ktngk28bc9@google.com
                    id: 4t0kwb4qb6xr0pfzzook70nd8
                    location: null
                    message_id: null
                    object: event
                    owner: <some_email@email.com>
                    participants:
                      - comment: null
                        email: email@email.com
                        name: null
                        status: noreply
                    read_only: true
                    title: 'Remote Event: Group Yoga Class'
                    when:
                      object: time
                      time: 1408875644
                    status: confirmed
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-events
      description: |-
        Creates an event.

        > `notify_participants `
        >
        > For certain Microsoft/Exchange/O365 accounts that are syncing via ActiveSync 16.0+, setting `notify_participants` to `false` will have no effect. By default, notifications will get sent no matter the value of `notify_participants`.
        >Setting `notify_participants` to `true` will always make the event show up as a meeting. If you'd like the event to show up as an appointment, set `notify_participants` to false and make sure the event does not have other participants than the appointment owner.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/events/create-events/create-events.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/events/create-events/create-events.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/events/create-events/create-events.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/events/create-events/create-events.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/events/create-events/create-events.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: boolean
          in: query
          name: notify_participants
          description: 'If set to true, email notifications containing the calendar event will be sent to all event participants.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event-Create-Update'
            examples:
              example-1:
                value:
                  title: Birthday Party
                  calendar_id: 947kpa7ih22bfkeujpkfqn5bu
                  status: confirmed
                  busy: true
                  read_only: true
                  participants:
                    - name: Aristotle
                      email: aristotle@nylas.com
                      status: 'yes'
                      comment: string
                  description: Come ready to skate
                  when:
                    object: time
                    time: 1408875644
                  location: Roller Rink
                  recurrence:
                    rrule:
                      - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                    timezone: America/New_York
  '/events/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the event.
    get:
      summary: Return An Event
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                ReturnAnEventResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    busy: true
                    calendar_id: 947kpa7ih22bfkeujpkfqn5bf
                    description: Coffee meeting
                    ical_uid: 5i2voruhvks4pbt5ktngk28bc9@google.com
                    id: 4t0kwb4qb6xr0pfzzook70nd8
                    location: string
                    message_id: null
                    object: event
                    owner: <some_email@email.com>
                    participants:
                      - comment: string
                        email: email@email.com
                        name: string
                        status: noreply
                    read_only: true
                    title: 'Remote Event: Group Yoga Class'
                    when:
                      object: time
                      time: 1408875644
                    status: confirmed
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-events-id
      description: Returns an event by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/events/get-events-id/get-events-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/events/get-events-id/get-events-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/events/get-events-id/get-events-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/events/get-events-id/get-events-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/events/get-events-id/get-events-id.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
    put:
      summary: Update An Event
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                UpdateAnEventResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    busy: true
                    calendar_id: 947kpa7ih22bfkeujpkfqn5bf
                    description: Coffee meeting
                    ical_uid: 5i2voruhvks4pbt5ktngk28bc9@google.com
                    id: 4t0kwb4qb6xr0pfzzook70nd8
                    location: string
                    message_id: null
                    object: event
                    owner: <some_email@email.com>
                    participants:
                      - comment: string
                        email: email@email.com
                        name: string
                        status: noreply
                    read_only: true
                    title: 'Remote Event: Group Yoga Class'
                    when:
                      object: time
                      time: 1408875644
                    status: confirmed
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: put-events-id
      description: |-
        Updates an event.



        > Ready Only and Recurring Events
        >
        > Updating and deleting an event is managed in a similar fashion to other endpoints with the restriction that `read_only` events cannot be updated and events cannot be updated or deleted from a `read_only` calendar.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/events/update-events/update-events.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/events/update-events/update-events.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/events/update-events/update-events.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/events/update-events/update-events.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/events/update-events/update-events.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: boolean
          in: query
          name: notify_participants
          description: 'Updates the event with the specified participant notification preference. If the value is set to true, email notifications containing the calendar event will be sent to all event participants.'
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event-Create-Update'
            examples:
              UpdateAnEventRequest:
                value:
                  title: Birthday Party
                  calendar_id: 947kpa7ih22bfkeujpkfqn5bu
                  status: confirmed
                  busy: true
                  read_only: true
                  participants:
                    - name: Aristotle
                      email: aristotle@nylas.com
                      status: 'yes'
                      comment: string
                  description: Come ready to skate
                  when:
                    object: time
                    time: 1408875644
                  location: Roller Rink
                  recurrence:
                    rrule:
                      - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                    timezone: America/New_York
    delete:
      summary: Delete An Event
      tags:
        - Events
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: delete-events-id
      description: Deletes an event.
      parameters:
        - schema:
            type: boolean
          in: query
          description: 'Deletes an event with the specified notification preference. If the value is set to true, email notifications containing the calendar event will be sent to all event participants'
          name: notify_participants
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/events/delete-events/delete-events.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/events/delete-events/delete-events.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/events/delete-events/delete-events.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/events/delete-events/delete-events.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/events/delete-events/delete-events.java
      security:
        - ACCESS_TOKEN: []
  /send-rsvp:
    post:
      summary: Send RSVP
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                SendRSVPResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    busy: true
                    calendar_id: 947kpa7ih22bfkeujpkfqn5bf
                    description: Coffee meeting
                    ical_uid: 5i2voruhvks4pbt5ktngk28bc9@google.com
                    id: 4t0kwb4qb6xr0pfzzook70nd8
                    location: string
                    message_id: null
                    object: event
                    owner: <some_email@email.com>
                    participants:
                      - comment: string
                        email: email@email.com
                        name: string
                        status: noreply
                    read_only: true
                    title: 'Remote Event: Group Yoga Class'
                    when:
                      object: time
                      time: 1408875644
                    status: confirmed
      operationId: post-send-rsvp
      description: |-
        The RSVP endpoint allows you to send attendance status updates to event organizers. This is only possible for events that appears on the “Emailed events”, which are calendar invitations.

        If the RSVP is successful, the event object is returned with your RSVP participant status updated. This endpoint is idempotent: this means that only one email will be sent when you issue the same request with the same body multiple times.

        Behind the scenes, RSVPs work by sending an email back to the event organizer in iMIP format. Errors when RSVPing to events follow the same status codes as sending errors.
      parameters:
        - schema:
            type: boolean
          in: query
          name: notify_participants
          description: 'If set to true, email notifications containing the calendar event will be sent to all event participants.'
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/events/rsvp/rsvp.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/events/rsvp/rsvp.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/events/rsvp/rsvp.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/events/rsvp/rsvp.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/events/rsvp/rsvp.java
      security:
        - ACCESS_TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                event_id:
                  type: string
                  minLength: 1
                  description: Sends a RSVP status update for the specified event ID. This value must be a valid event ID from the “Emailed events” calendar.
                status:
                  type: string
                  minLength: 1
                  description: Sends a RSVP status update with the specified status
                  enum:
                    - 'yes'
                    - 'no'
                    - maybe
                comment:
                  type: string
                  minLength: 1
                  description: Sends a RSVP status update with the specified comment.
                account_id:
                  type: string
                  minLength: 1
                  description: Sends a RSVP status update for the specified account ID.
              required:
                - event_id
                - status
                - account_id
            examples:
              SendRSVPRequest:
                value:
                  event_id: string
                  status: 'yes'
                  comment: string
                  account_id: string
  /resources:
    get:
      summary: Return Resource Information
      tags:
        - Room Resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room-Resources'
              examples:
                RoomResourcesResponse:
                  value:
                    - object: room_resource
                      email: training-room-1A@office365.com
                      name: Training Room 1A
                      capacity: '8'
                      building: West Building
                      floor_name: '7'
                      floor_number: '7'
        '400':
          description: Bad Request
      operationId: get-resources
      description: |-
        With the `/resources` endpoint, you can see which rooms a user can book within their GSuite or Office365 organization. To book an event in a room, including the room resource as a participant when creating the event with the `/events` endpoint.

        ## Authentication
        Depending on if you are using GSuite or Microsoft Office 365 you'll need to enable certain permissions.

        ### Microsoft

        For Microsoft Office 365 you need to enable `Place.Read.All` as an admin to use Room Resources. See Admin Approval for more.

        You also need to enable the `room_resources.read_only` scope. See the authentication scopes guide for more info.

        ### GSuite

        You need to enable the `room_resources.read_only` scope. See the authentication scopes guide for more info.
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  /contacts:
    get:
      summary: Return All Contacts
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                ReturnAllContactsResponse:
                  value:
                    account_id: x2x2x2x2x2x2x2x2x2x2x2
                    birthday: '1960-12-31'
                    company_name: Nylas
                    emails:
                      - email: john@doe.com
                        type: work
                    given_name: John
                    id: z3z3z3z3z3z3z3z3z3z3z3
                    im_addresses:
                      - type: aim
                        im_address: myaimaddress
                    job_title: Software Engineer
                    manager_name: Bill the manager
                    middle_name: Jacob
                    nickname: JD
                    notes: Loves ramen
                    object: contact
                    office_location: 123 Main Street
                    phone_numbers:
                      - number: 1 800 123 4567
                        type: business
                    physical_addresses:
                      - format: string
                        type: work
                        street_address: string
                        city: string
                        postal_code: string
                        state: string
                        country: string
                    picture_url: 'https://api.nylas.com/contacts/427abc427abc427abc/picture'
                    suffix: string
                    surname: string
                    web_pages:
                      - type: profile
                        url: string
                    groups:
                      - id: string
                        object: contact_group
                        account_id: string
                        name: string
                        path: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-contacts
      description: |
        Returns all contacts.

        ## Exact Matches
        We currently only support filtering on exact value matches in the database. That means the strings you filter on must be the exact strings stored on the contact in the database.

        ## Parameter Percent Encoding
        It is important to note that parameter values must use [percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding) (also known as URL encoding).
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/contacts/get-contacts/get-contacts.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/contacts/get-contacts/get-contacts.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/contacts/get-contacts/get-contacts.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/contacts/get-contacts/get-contacts.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/contacts/get-contacts/get-contacts.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Access
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: integer
          in: query
          name: limit
          description: 'Returns the contacts with the specified number of objects. This value often defaults to 100. If set too high, requests may fail to prevent excessively large response bodies. '
        - schema:
            type: integer
          in: query
          description: Returns the contacts with the specified offset. This value is a zero-based offset from default object sorting.
          name: offset
        - schema:
            type: string
            example: email=fred%40nylas.com
          in: query
          name: email
          description: 'Returns the contacts matching the exact contact''s email. '
        - schema:
            type: string
            example: phone_number=4158889999
          in: query
          name: phone_number
          description: Returns the contacts matching the contact's exact phone number.
        - schema:
            type: string
            example: street_address=1600%20Pennsylvania%20Ave
          in: query
          name: street_address
          description: Returns the contacts matching the one of the contact's exact street address.
        - schema:
            type: string
            example: postal_code=20500
          in: query
          name: postal_code
          description: Returns the contacts matching the contact's exact postal code of one of the contact's addresses.
        - schema:
            type: string
          in: query
          name: state
          description: Returns the contacts matching the contact's exact state for one of the contact's physical addresses
        - schema:
            type: string
          in: query
          name: country
          description: Returns the contacts matching the contact's exact physical addresses
        - schema:
            type: string
            example: source=inbox
          in: query
          name: source
          description: 'Returns the contacts matching from the address book or auto-generated contacts from emails. For example of contacts only from the address book: `/`contacts?source=address_book` or for only autogenerated contacts: `/contacts?source=inbox`.'
        - schema:
            type: string
          in: query
          name: group
          description: Returns the contacts belonging to the Contact Group matching this ID.
        - schema:
            type: boolean
          in: query
          name: recurse
          description: 'When set to true, returns the contacts also within the specified Contact Group subgroups, if the group parameter is set.'
    post:
      summary: Create a Contact
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                CreateAContactResponse:
                  value:
                    account_id: x2x2x2x2x2x2x2x2x2x2x2
                    birthday: '1960-12-31'
                    company_name: Nylas
                    emails:
                      - email: john@doe.com
                        type: work
                    given_name: John
                    id: z3z3z3z3z3z3z3z3z3z3z3
                    im_addresses:
                      - type: aim
                        im_address: myaimaddress
                    job_title: Software Engineer
                    manager_name: Bill the manager
                    middle_name: Jacob
                    nickname: JD
                    notes: Loves ramen
                    object: contact
                    office_location: 123 Main Street
                    phone_numbers:
                      - number: 1 800 123 4567
                        type: business
                    physical_addresses:
                      - format: string
                        type: work
                        street_address: string
                        city: string
                        postal_code: string
                        state: string
                        country: string
                    picture_url: 'https://api.nylas.com/contacts/427abc427abc427abc/picture'
                    suffix: string
                    surname: string
                    web_pages:
                      - type: profile
                        url: string
                    groups:
                      - id: string
                        object: contact_group
                        account_id: string
                        name: string
                        path: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-contacts
      description: Creates a contact.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/contacts/create-contact/create-contact.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/contacts/create-contact/create-contact.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/contacts/create-contact/create-contact.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/contacts/create-contact/create-contact.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/contacts/create-contact/create-contact.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAContact'
            examples:
              CreateAContactRequest:
                value:
                  birthday: '1960-12-31'
                  company_name: Nylas
                  emails:
                    - email: john@doe.com
                      type: work
                  given_name: John
                  im_addresses:
                    - type: aim
                      im_address: myaimaddress
                  job_title: Software Engineer
                  manager_name: Bill the manager
                  middle_name: Jacob
                  nickname: JD
                  notes: Loves ramen
                  office_location: 123 Main Street
                  phone_numbers:
                    - number: 1 800 123 4567
                      type: business
                  physical_addresses:
                    - format: string
                      type: work
                      street_address: string
                      city: string
                      postal_code: string
                      state: string
                      country: string
                  suffix: string
                  surname: string
                  web_pages:
                    - type: profile
                      url: string
                  group: string
  '/contacts/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the contact.
    get:
      summary: Return a Contact
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                ReturnAContactResponse:
                  value:
                    account_id: x2x2x2x2x2x2x2x2x2x2x2
                    birthday: '1960-12-31'
                    company_name: Nylas
                    emails:
                      - email: john@doe.com
                        type: work
                    given_name: John
                    id: z3z3z3z3z3z3z3z3z3z3z3
                    im_addresses:
                      - type: aim
                        im_address: myaimaddress
                    job_title: Software Engineer
                    manager_name: Bill the manager
                    middle_name: Jacob
                    nickname: JD
                    notes: Loves ramen
                    object: contact
                    office_location: 123 Main Street
                    phone_numbers:
                      - number: 1 800 123 4567
                        type: business
                    physical_addresses:
                      - format: string
                        type: work
                        street_address: string
                        city: string
                        postal_code: string
                        state: string
                        country: string
                    picture_url: 'https://api.nylas.com/contacts/427abc427abc427abc/picture'
                    suffix: string
                    surname: string
                    web_pages:
                      - type: profile
                        url: string
                    groups:
                      - id: string
                        object: contact_group
                        account_id: string
                        name: string
                        path: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-contacts-id
      description: Returns a contact by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: code_samples/contacts/get-contacts-id/get-contacts-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/contacts/get-contacts-id/get-contacts-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/contacts/get-contacts-id/get-contacts-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/contacts/get-contacts-id/get-contacts-id.java
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/contacts/get-contacts-id/get-contacts-id.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
    put:
      summary: Update a Contact
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                UpdateAContactResponse:
                  value:
                    account_id: x2x2x2x2x2x2x2x2x2x2x2
                    birthday: '1960-12-31'
                    company_name: Nylas
                    emails:
                      - email: john@doe.com
                        type: work
                    given_name: John
                    id: z3z3z3z3z3z3z3z3z3z3z3
                    im_addresses:
                      - type: aim
                        im_address: myaimaddress
                    job_title: Software Engineer
                    manager_name: Bill the manager
                    middle_name: Jacob
                    nickname: JD
                    notes: Loves ramen
                    object: contact
                    office_location: 123 Main Street
                    phone_numbers:
                      - number: 1 800 123 4567
                        type: business
                    physical_addresses:
                      - format: string
                        type: work
                        street_address: string
                        city: string
                        postal_code: string
                        state: string
                        country: string
                    picture_url: 'https://api.nylas.com/contacts/427abc427abc427abc/picture'
                    suffix: string
                    surname: string
                    web_pages:
                      - type: profile
                        url: string
                    groups:
                      - id: string
                        object: contact_group
                        account_id: string
                        name: string
                        path: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
      operationId: put-contacts-id
      description: Updates a contact.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/contacts/update-contact/update-contact.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/contacts/update-contact/update-contact.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/contacts/update-contact/update-contact.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/contacts/update-contact/update-contact.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/contacts/update-contact/update-contact.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAContact'
            examples:
              UpdateAContactRequest:
                value:
                  birthday: '1960-12-31'
                  company_name: Nylas
                  emails:
                    - email: john@doe.com
                      type: work
                  given_name: John
                  im_addresses:
                    - type: aim
                      im_address: myaimaddress
                  job_title: Software Engineer
                  manager_name: Bill the manager
                  middle_name: Jacob
                  nickname: JD
                  notes: Loves ramen
                  office_location: 123 Main Street
                  phone_numbers:
                    - number: 1 800 123 4567
                      type: business
                  physical_addresses:
                    - format: string
                      type: work
                      street_address: string
                      city: string
                      postal_code: string
                      state: string
                      country: string
                  suffix: string
                  surname: string
                  web_pages:
                    - type: profile
                      url: string
                  group: string
    delete:
      summary: Delete a Contact
      tags:
        - Contacts
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
      operationId: delete-contacts-id
      description: Deletes a contact.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/contacts/delete-contact/delete-contact.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/contacts/delete-contact/delete-contact.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/contacts/delete-contact/delete-contact.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/contacts/delete-contact/delete-contact.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/contacts/delete-contact/delete-contact.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  '/contacts/{id}/picture':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Returns a Contacts Picture
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
              examples:
                Binary Data:
                  value: |-
                    HTTP/1.1 200 OK
                    Server: nginx
                    Date: Mon, 05 Feb 2018 21:26:04 GMT
                    Content-Type: image/jpeg
                    Content-Length: 2388
                    Connection: close
                    Access-Control-Allow-Headers: Authorization,Accept,Cache-Control,X-Requested-With,Content-Type
                    Access-Control-Allow-Methods: GET,PUT,POST,DELETE,OPTIONS
                    Access-Control-Allow-Credentials: true
                    Nylas-API-Version: 2.0
                    Strict-Transport-Security: max-age=31536000; includeSubDomains
                    X-XSS-Protection: 1
                    X-Content-Type-Options: nosniff
                    Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'

                    {BINARY DATA BLOB}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-contacts-id-picture
      description: |-
        Some contacts have profile pictures. If a contact has a picture associated with it, when you make a normal GET request for the contact, the `picture_url` field will be filled out with the url to send the picture GET request.

        The result is the header information with binary data. If you pipe the result into a data file specified by Content-Type field in the header data, jpg for this example, you can open that file and view the picture.

        ```
        curl --include --request GET \
          --url 'https://api.nylas.com/contacts/{id}/picture' \
          --header "authorization: <Authorization>" > picture.jpg
        ```
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/contacts/contact-picture/contact-picture.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/contacts/contact-picture/contact-picture.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/contacts/contact-picture/contact-picture.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/contacts/contact-picture/contact-picture.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/contacts/contact-picture/contact-picture.java
      parameters:
        - schema:
            type: string
          in: header
          name: authorization
          description: '`<Authorization>" > picture.jpg`'
  /contacts/groups:
    get:
      summary: Return Contact Groups
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      minLength: 1
                      example: a0a0a0a0a0a0a0a0a0a0a0
                    object:
                      type: string
                      minLength: 1
                      example: contact_group
                      default: contact_group
                    account_id:
                      type: string
                      minLength: 1
                      example: x2x2x2x2x2x2x2x2x2x2x2
                    name:
                      type: string
                      minLength: 1
                      example: Work
                    path:
                      type: string
                      minLength: 1
                      example: Contacts/Work
              examples:
                ReturnContactGroupsResponse:
                  value:
                    - id: a0a0a0a0a0a0a0a0a0a0a0
                      object: contact_group
                      account_id: x2x2x2x2x2x2x2x2x2x2x2
                      name: Work
                      path: Contacts/Work
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-contacts-groups
      description: |-
        Returns contact groups. Contact groups provide a way for users to organize their contacts.
        Contact groups have different meanings across different providers. This affects the way contact groups are presented through the Nylas API.

        ## Gmail

        Gmail contact groups translate to labels. Any number of contacts may have any number of labels. Gmail contacts can belong to any number of contact groups. At this time, labels cannot be nested. Gmail contact groups will have equivalent name and path fields.

        ## Exchange

        Exchange contact groups translate to contact folders. A specific contact must live inside of exactly one folder. Exchange contacts belong to exactly one contact group. Contact folders may be nested. To avoid ambiguity, the path field of Exchange contact groups represents the fully qualified path of the corresponding contact folder (e.g. Contacts/Personal) and the name field represents the name of the folder only (e.g. Personal).
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/contacts/contact-groups/contact-groups.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/contacts/contact-groups/contact-groups.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/contacts/contact-groups/contact-groups.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/contacts/contact-groups/contact-groups.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/contacts/contact-groups/contact-groups.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  /messages/search:
    get:
      summary: Search Messages
      tags:
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search-Messages'
              examples:
                SearchMessagesResponse:
                  value:
                    - account_id: 43jf3n4es3***
                      bcc: []
                      body: 'Hello, how are you?'
                      cc: []
                      date: 1559770299
                      events: []
                      files: []
                      folder:
                        display_name: Draft
                        id: eeangfw9vm5***
                        name: drafts
                      from:
                        - email: nylastest***@yahoo.com
                          name: John Doe
                      id: 27hvuc1w2v85***
                      object: draft
                      reply_to: []
                      reply_to_message_id: null
                      snippet: 'Hello, how are you?'
                      starred: false
                      subject: ugh?
                      thread_id: 3sso5z8gb3***
                      to:
                        - email: '{{email}}'
                          name: '{{name}}'
                      unread: false
                      version: 0
                    - account_id: 43jf3n4es3i***
                      bcc: []
                      body: 'Hello, how are you?'
                      cc: []
                      date: 1559762902
                      events: []
                      files: []
                      folder:
                        display_name: Draft
                        id: eeangfw9vm5j4f***
                        name: drafts
                      from:
                        - email: nylastest***@yahoo.com
                          name: John Doe
                      id: 92c7gucghzh16147dpluw1q2d
                      object: draft
                      reply_to: []
                      reply_to_message_id: null
                      snippet: 'Hello, how are you?'
                      starred: false
                      subject: Hello
                      thread_id: e48pmw615r***
                      to:
                        - email: '{{email}}'
                          name: '{{name}}'
                      unread: false
                      version: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-messages-search
      parameters:
        - schema:
            type: string
          in: query
          name: q
          description: The query used to search messages.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/search/search-messages/search-messages.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/search/search-messages/search-messages.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/search/search-messages/search-messages.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/search/search-messages/search-messages.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/search/search-messages/search-messages.java
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      description: |-
        Searches messages. For details on the query syntax for the most commmon providers, please see:
        * [Google](https://support.google.com/mail/answer/7190?hl=en)
        * [Exchange/Outlook](https://support.office.com/en-us/article/Learn-to-narrow-your-search-criteria-for-better-searches-in-Outlook-d824d1e9-a255-4c8a-8553-276fb895a8da)
        * [Yahoo](https://help.yahoo.com/kb/SLN4701.html)
        * [Generic IMAP](https://tools.ietf.org/html/rfc3501#section-6.4.4)
      security:
        - ACCESS_TOKEN: []
  /threads/search:
    get:
      summary: Search Threads
      tags:
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search-Threads'
              examples:
                SearchThreadsResponse:
                  value:
                    - account_id: 43jf3n4es3i***
                      draft_ids:
                        - 27hvuc1w2v85***
                      first_message_timestamp: 1559770299
                      folders:
                        - display_name: Draft
                          id: eeangfw9vm5j***
                          name: drafts
                      has_attachments: false
                      id: 3sso5z8gb3ts***
                      last_message_received_timestamp: null
                      last_message_sent_timestamp: null
                      last_message_timestamp: 1559770299
                      message_ids: []
                      object: thread
                      participants: []
                      snippet: ''
                      starred: false
                      subject: ugh?
                      unread: false
                      version: 1
                    - account_id: 43jf3n4es3i***
                      draft_ids:
                        - 92c7gucghzh***
                      first_message_timestamp: 1559762902
                      folders:
                        - display_name: Draft
                          id: eeangfw9vm5***
                          name: drafts
                      has_attachments: false
                      id: e48pmw615r2i***
                      last_message_received_timestamp: null
                      last_message_sent_timestamp: null
                      last_message_timestamp: 1559762902
                      message_ids: []
                      object: thread
                      participants: []
                      snippet: ''
                      starred: false
                      subject: Hello
                      unread: false
                      version: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-threads-search
      description: |-
        Searches threads.For details on the query syntax for the most commmon providers, please see:

        * [Google](https://support.google.com/mail/answer/7190?hl=en)
        * [Exchange/Outlook](https://support.office.com/en-us/article/Learn-to-narrow-your-search-criteria-for-better-searches-in-Outlook-d824d1e9-a255-4c8a-8553-276fb895a8da)
        * [Yahoo](https://help.yahoo.com/kb/SLN4701.html)
        * [Generic IMAP](https://tools.ietf.org/html/rfc3501#section-6.4.4)
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/search/search_thread/search-threads.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/search/search_thread/search-threads.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/search/search_thread/search-threads.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/search/search_thread/search-threads.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/search/search_thread/search-threads.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
          in: query
          name: q
          description: The query used to search for threads.
  '/a/{client_id}/webhooks':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client ID of your Nylas developer application.
    get:
      summary: Return All Webhooks
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhooks-Object'
              examples:
                ReturnAllWebhooksResponse:
                  value:
                    - application_id: 8eejdhpc5dv04w6ea8lzlxtkt
                      callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                      id: 7b5y8f25p344jy8yem6v5jir
                      state: active
                      triggers:
                        - message.created
                      version: '2.0'
      operationId: get-a-client_id-webhooks
      description: Returns all webhooks.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/webhooks/get-webhooks/get-webhooks.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/webhooks/get-webhooks/get-webhooks.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/webhooks/get-webhooks/get-webhooks.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/webhooks/get-webhooks/get-webhooks.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/webhooks/get-webhooks/get-webhooks.java
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
    post:
      summary: Create a Webhook
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhooks-Object'
              examples:
                CreateAWebhookResponse:
                  value:
                    application_id: 8eejdhpc5dv04w6ea8lzlxtkt
                    callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                    id: 7b5y8f25p344jy8yem6v5jir
                    state: active
                    triggers:
                      - message.created
                    version: '2.0'
      operationId: post-a-client_id-webhooks
      description: Creates a webhook.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/webhooks/create-webhooks/create-webhooks.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/webhooks/create-webhooks/create-webhooks.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/webhooks/create-webhooks/create-webhooks.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/webhooks/create-webhooks/create-webhooks.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/webhooks/create-webhooks/create-webhooks.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                callback_url:
                  type: string
                  minLength: 1
                  description: Creates a URL where the Nylas servers can send notifications. It must be accessible from the public internet and must be an HTTPS endpoint.
                  example: 'https://97a5db5e7c59.ngrok.io/webhook'
                triggers:
                  type: array
                  description: 'Creates a set of triggers, describing the notifications this webhook should receive.'
                  items:
                    type: string
                    example: message.created
                state:
                  type: string
                  minLength: 1
                  enum:
                    - active
                    - inactive
                  description: Set the state of the webhook. Can be set to active or inactive.
                  example: active
              required:
                - callback_url
                - triggers
                - state
            examples:
              CreateAWebhookRequest:
                value:
                  callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                  triggers:
                    - message.created
                  state: active
        description: ''
  '/a/{client_id}/webhooks/{id}':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the webhook.
    get:
      summary: Return a Webhook
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhooks-Object'
              examples:
                ReturnAWebhookResponse:
                  value:
                    application_id: 8eejdhpc5dv04w6ea8lzlxtkt
                    callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                    id: 7b5y8f25p344jy8yem6v5jir
                    state: active
                    triggers:
                      - message.created
                    version: '2.0'
      operationId: get-a-client_id-webhooks-id
      description: Returns a webhook by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/webhooks/get-webhooks-id/get-webhooks-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/webhooks/get-webhooks-id/get-webhooks-id.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/webhooks/get-webhooks-id/get-webhooks-id.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/webhooks/get-webhooks-id/get-webhooks-id.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/webhooks/get-webhooks-id/get-webhooks-id.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
    put:
      summary: Update a Webhook
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhooks-Object'
              examples:
                UpdateAWebhookResponse:
                  value:
                    application_id: 8eejdhpc5dv04w6ea8lzlxtkt
                    callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                    id: 7b5y8f25p344jy8yem6v5jir
                    state: active
                    triggers:
                      - message.created
                    version: '2.0'
      operationId: put-a-client_id-webhooks-id
      description: Updates a webhook by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/webhooks/update-webhooks/update-webhooks.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/webhooks/update-webhooks/update-webhooks.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/webhooks/update-webhooks/update-webhooks.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/webhooks/update-webhooks/update-webhooks.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/webhooks/update-webhooks/update-webhooks.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  description: Set the state to active or inactive
                  enum:
                    - active
                    - inactive
    delete:
      summary: Delete a Webhook
      tags:
        - Webhooks
      responses:
        '200':
          description: OK. Returns `null`.
      operationId: delete-a-client_id-webhooks-id
      description: Deletes a webhook by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/webhooks/delete-webhooks/delete-webhooks.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/webhooks/delete-webhooks/delete-webhooks.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/webhooks/delete-webhooks/delete-webhooks.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/webhooks/delete-webhooks/delete-webhooks.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/webhooks/delete-webhooks/delete-webhooks.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  /delta/latest_cursor:
    post:
      summary: Get A Delta Cursor
      tags:
        - Deltas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  cursor:
                    type: string
                    minLength: 1
                required:
                  - cursor
              examples:
                GetADeltaCursorResponse:
                  value:
                    cursor: aqb0llc2ioo0***
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: post-delta-latest_cursor
      description: |-
        Return a delta cursor. The delta cursor is used to return data using the other deltas endpoints.

        Review the [Deltas documentation](# link) for more.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/deltas/latest_cursor/latest_cursor.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/deltas/latest_cursor/latest_cursor.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/deltas/latest_cursor/latest_cursor.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/deltas/latest_cursor/latest_cursor.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/deltas/latest_cursor/latest_cursor.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  /delta:
    get:
      summary: Request Delta Cursors
      tags:
        - Deltas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  cursor_end:
                    type: string
                    minLength: 1
                  cursor_start:
                    type: string
                    minLength: 1
                  deltas:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        attributes:
                          type: object
                          properties:
                            account_id:
                              type: string
                              minLength: 1
                            bcc:
                              type: array
                              items:
                                type: object
                            body:
                              type: string
                              minLength: 1
                            cc:
                              type: array
                              items:
                                type: object
                            date:
                              type: number
                            events:
                              type: array
                              items:
                                type: object
                            files:
                              type: array
                              items:
                                type: object
                            from:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            id:
                              type: string
                              minLength: 1
                            labels:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  display_name:
                                    type: string
                                    minLength: 1
                                  id:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            object:
                              type: string
                              minLength: 1
                            reply_to:
                              type: array
                              items:
                                type: object
                            snippet:
                              type: string
                              minLength: 1
                            starred:
                              type: boolean
                            subject:
                              type: string
                              minLength: 1
                            thread_id:
                              type: string
                              minLength: 1
                            to:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            unread:
                              type: boolean
                        cursor:
                          type: string
                          minLength: 1
                        event:
                          type: string
                          minLength: 1
                        id:
                          type: string
                          minLength: 1
                        object:
                          type: string
                          minLength: 1
              examples:
                RequestDeltaCursorsResponse:
                  value:
                    cursor_end: 4ekj8ktel67njbaw1c0nlvbdi
                    cursor_start: 9fboxh6t9b3ar4fwocxpwrcss
                    deltas:
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          bcc: []
                          body: '<div dir="ltr">Hi<br clear="all"><div><div dir="ltr" class="gmail_signature" data-smartmail="gmail_signature"><div dir="ltr"><span><br><div dir="ltr" style="margin-left:0pt" align="left"><table style="border:none;border-collapse:collapse"><colgroup><col width="84"><col width="540"></colgroup><tbody><tr style="height:79pt"><td style="vertical-align:top;padding:5pt 5pt 5pt 5pt;overflow:hidden"><p dir="ltr" style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a href="https://www.nylas.com/" target="_blank"><span style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span style="border:none;display:inline-block;overflow:hidden;width:70px;height:70px"><img src="https://lh6.googleusercontent.com/zJp7cuIKWhNYHc6KsuHUsfrhyCp9DKxg243bjSLP9JKi9SEX-uMtTAr5qy54Kdlr3RNkTwAEvIDHKBCjodqu8uVLLbReY47_-KtRilUatWsZRRfO2LH9ZTCykLEVBOj8iJ7XmNeX" width="70" height="70" style="margin-left:0px;margin-top:0px"></span></span></a></p></td><td style="vertical-align:top;padding:5pt 5pt 5pt 5pt;overflow:hidden"><p dir="ltr" style="line-height:1.7999999999999998;margin-top:0pt;margin-bottom:0pt"><span style="font-size:10pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;font-weight:700;vertical-align:baseline;white-space:pre-wrap">Katherine Perry</span></p><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span style="font-size:8pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Lead Technical Writer, </span><a href="https://www.nylas.com/" target="_blank"><span style="font-size:8pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Nylas</span></a></p><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span style="font-size:8pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">email@nylas.com</span></p></td></tr><tr style="height:63pt"><td colspan="2" style="vertical-align:top;padding:5pt 5pt 5pt 5pt;overflow:hidden"><p dir="ltr" style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a href="https://www.nylas.com/resources/savings-calculator-integrations/" target="_blank"><span style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span style="border:none;display:inline-block;overflow:hidden;width:306px;height:45px"><img src="https://lh3.googleusercontent.com/bTFwY25C4D9lD4GJHxsVEWr8--YG25chLhjDJb3rWpmXPw5RngwZHUWhbDracmaXL7n6mtt5JPM9egiGaFwU2bNKMrvMcctgvrHFOI7YxIzze7CTKKVJRqD8kq2hNUE2IJiPWFmL" width="306" height="45" style="margin-left:0px;margin-top:0px"></span></span></a></p></td></tr></tbody></table></div></span></div></div></div></div>'
                          cc: []
                          date: 1602001027
                          events: []
                          files: []
                          from:
                            - email: email@nylas.com
                              name: Katherine Perry
                          id: 52m5un5v1m7rjigna5agc7y35
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          object: message
                          reply_to: []
                          snippet: 'Hi Katherine PerryLead Technical Writer, Nylasemail@nylas.com'
                          starred: false
                          subject: New Message
                          thread_id: chvd75bowkhg3gfpgeeygcxbb
                          to:
                            - email: swag@nylas.com
                              name: Katherine Personal
                          unread: false
                        cursor: 8hhvivgus0fbo4qengko8c38x
                        event: create
                        id: 52m5un5v1m7rjigna5agc7y35
                        object: message
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          draft_ids: []
                          first_message_timestamp: 1602001027
                          has_attachments: false
                          id: chvd75bowkhg3gfpgeeygcxbb
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          last_message_received_timestamp: null
                          last_message_sent_timestamp: 1602001027
                          last_message_timestamp: 1602001027
                          message_ids:
                            - 52m5un5v1m7rjigna5agc7y35
                          object: thread
                          participants:
                            - email: swag@nylas.com
                              name: Katherine Personal
                            - email: email@nylas.com
                              name: Katherine Perry
                          snippet: 'Hi Katherine PerryLead Technical Writer, Nylasemail@nylas.com'
                          starred: false
                          subject: New Message
                          unread: false
                          version: 0
                        cursor: 4ekj8ktel67njbaw1c0nlvbdi
                        event: create
                        id: chvd75bowkhg3gfpgeeygcxbb
                        object: thread
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-delta
      description: |-
        Returns a set of delta cursors.

        This endpoint returns the most recent set of deltas. Use the data cursor as a query parameter to return deltas. This endpoint does not stream or poll for data. If this is your first time getting data, this could return nothing. The response will vary based on the type of delta cursor.

        Review the [Deltas documentation](# link) for more.
      parameters:
        - schema:
            type: string
          in: query
          name: cursor
          required: true
          description: The data cursor from `/delta/latest_cursor`.
        - schema:
            type: string
            default: expanded
          in: query
          name: view
          description: 'This value indicates if the data expands thread and message objects in the response to include additional information, when the value is set to expanded.'
        - schema:
            type: string
            enum:
              - contact
              - file
              - message
              - event
              - draft
              - thread
              - folder
              - label
            example: contact
          in: query
          name: excluded_types
          description: A comma-separated list of object types to exclude from the returned deltas.
        - schema:
            type: string
            enum:
              - contact
              - event
              - file
              - message
              - draft
              - thread
              - folder
              - label
          in: query
          name: include_types
          description: A comma-separated list of the object types that will only be included in the returned deltas.
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/deltas/request_deltas/request_deltas.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/deltas/request_deltas/request_deltas.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/deltas/request_deltas/request_deltas.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/deltas/request_deltas/request_deltas.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/deltas/request_deltas/request_deltas.java
      security:
        - BASIC_AUTH: []
  /delta/longpoll:
    get:
      summary: Return Long-Polling Deltas
      tags:
        - Deltas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  cursor_end:
                    type: string
                    minLength: 1
                  cursor_start:
                    type: string
                    minLength: 1
                  deltas:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        attributes:
                          type: object
                          properties:
                            account_id:
                              type: string
                              minLength: 1
                            bcc:
                              type: array
                              items:
                                type: object
                            body:
                              type: string
                              minLength: 1
                            cc:
                              type: array
                              items:
                                type: object
                            date:
                              type: number
                            events:
                              type: array
                              items:
                                type: object
                            files:
                              type: array
                              items:
                                type: object
                            from:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            id:
                              type: string
                              minLength: 1
                            labels:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  display_name:
                                    type: string
                                    minLength: 1
                                  id:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            object:
                              type: string
                              minLength: 1
                            reply_to:
                              type: array
                              items:
                                type: object
                            snippet:
                              type: string
                              minLength: 1
                            starred:
                              type: boolean
                            subject:
                              type: string
                              minLength: 1
                            thread_id:
                              type: string
                              minLength: 1
                            to:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            unread:
                              type: boolean
                        cursor:
                          type: string
                          minLength: 1
                        event:
                          type: string
                          minLength: 1
                        id:
                          type: string
                          minLength: 1
                        object:
                          type: string
                          minLength: 1
              examples:
                ReturnLongPollingDeltasResponse:
                  value:
                    cursor_end: 4ekj8ktel67njbaw1c0nlvbdi
                    cursor_start: 9fboxh6t9b3ar4fwocxpwrcss
                    deltas:
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          bcc: []
                          body: '<div dir="ltr">Hi<br clear="all"><div><div dir="ltr" class="gmail_signature" data-smartmail="gmail_signature"><div dir="ltr"><span><br><div dir="ltr" style="margin-left:0pt" align="left"><table style="border:none;border-collapse:collapse"><colgroup><col width="84"><col width="540"></colgroup><tbody><tr style="height:79pt"><td style="vertical-align:top;padding:5pt 5pt 5pt 5pt;overflow:hidden"><p dir="ltr" style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a href="https://www.nylas.com/" target="_blank"><span style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span style="border:none;display:inline-block;overflow:hidden;width:70px;height:70px"><img src="https://lh6.googleusercontent.com/zJp7cuIKWhNYHc6KsuHUsfrhyCp9DKxg243bjSLP9JKi9SEX-uMtTAr5qy54Kdlr3RNkTwAEvIDHKBCjodqu8uVLLbReY47_-KtRilUatWsZRRfO2LH9ZTCykLEVBOj8iJ7XmNeX" width="70" height="70" style="margin-left:0px;margin-top:0px"></span></span></a></p></td><td style="vertical-align:top;padding:5pt 5pt 5pt 5pt;overflow:hidden"><p dir="ltr" style="line-height:1.7999999999999998;margin-top:0pt;margin-bottom:0pt"><span style="font-size:10pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;font-weight:700;vertical-align:baseline;white-space:pre-wrap">Katherine Perry</span></p><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span style="font-size:8pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Lead Technical Writer, </span><a href="https://www.nylas.com/" target="_blank"><span style="font-size:8pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Nylas</span></a></p><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span style="font-size:8pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">email@nylas.com</span></p></td></tr><tr style="height:63pt"><td colspan="2" style="vertical-align:top;padding:5pt 5pt 5pt 5pt;overflow:hidden"><p dir="ltr" style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a href="https://www.nylas.com/resources/savings-calculator-integrations/" target="_blank"><span style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span style="border:none;display:inline-block;overflow:hidden;width:306px;height:45px"><img src="https://lh3.googleusercontent.com/bTFwY25C4D9lD4GJHxsVEWr8--YG25chLhjDJb3rWpmXPw5RngwZHUWhbDracmaXL7n6mtt5JPM9egiGaFwU2bNKMrvMcctgvrHFOI7YxIzze7CTKKVJRqD8kq2hNUE2IJiPWFmL" width="306" height="45" style="margin-left:0px;margin-top:0px"></span></span></a></p></td></tr></tbody></table></div></span></div></div></div></div>'
                          cc: []
                          date: 1602001027
                          events: []
                          files: []
                          from:
                            - email: email@nylas.com
                              name: Katherine Perry
                          id: 52m5un5v1m7rjigna5agc7y35
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          object: message
                          reply_to: []
                          snippet: 'Hi Katherine PerryLead Technical Writer, Nylasemail@nylas.com'
                          starred: false
                          subject: New Message
                          thread_id: chvd75bowkhg3gfpgeeygcxbb
                          to:
                            - email: swag@nylas.com
                              name: Katherine Personal
                          unread: false
                        cursor: 8hhvivgus0fbo4qengko8c38x
                        event: create
                        id: 52m5un5v1m7rjigna5agc7y35
                        object: message
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          draft_ids: []
                          first_message_timestamp: 1602001027
                          has_attachments: false
                          id: chvd75bowkhg3gfpgeeygcxbb
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          last_message_received_timestamp: null
                          last_message_sent_timestamp: 1602001027
                          last_message_timestamp: 1602001027
                          message_ids:
                            - 52m5un5v1m7rjigna5agc7y35
                          object: thread
                          participants:
                            - email: swag@nylas.com
                              name: Katherine Personal
                            - email: email@nylas.com
                              name: Katherine Perry
                          snippet: 'Hi Katherine PerryLead Technical Writer, Nylasemail@nylas.com'
                          starred: false
                          subject: New Message
                          unread: false
                          version: 0
                        cursor: 4ekj8ktel67njbaw1c0nlvbdi
                        event: create
                        id: chvd75bowkhg3gfpgeeygcxbb
                        object: thread
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-delta-longpoll
      description: |-
        Long Polling deltas will instruct the server to keep the connection open until a change comes through or it times out. You can use this behavior on platforms that do not support partial response parsing, such as web browsers.

        Review the [Deltas documentation](# link) for more. 
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/deltas/long-poll/long-poll.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/deltas/long-poll/long-poll.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/deltas/long-poll/long-poll.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/deltas/long-poll/long-poll.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/deltas/long-poll/long-poll.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
          in: query
          name: cursor
          required: true
          description: The data cursor from `/delta/latest_cursor`.
        - schema:
            type: string
            default: expanded
          in: query
          name: view
          description: 'This value indicates if the data expands thread and message objects in the response to include additional information, when the value is set to expanded.'
        - schema:
            type: string
            enum:
              - contact
              - file
              - message
              - event
              - draft
              - thread
              - folder
              - label
            example: contact
          in: query
          name: excluded_types
          description: A comma-separated list of object types to exclude from the returned deltas.
        - schema:
            type: string
            enum:
              - contact
              - event
              - file
              - message
              - draft
              - thread
              - folder
              - label
          in: query
          name: include_types
          description: A comma-separated list of the object types that will only be included in the returned deltas.
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  /delta/streaming:
    get:
      summary: Streaming Deltas
      tags:
        - Deltas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  cursor_end:
                    type: string
                    minLength: 1
                  cursor_start:
                    type: string
                    minLength: 1
                  deltas:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        attributes:
                          type: object
                          properties:
                            account_id:
                              type: string
                              minLength: 1
                            bcc:
                              type: array
                              items:
                                type: object
                            body:
                              type: string
                              minLength: 1
                            cc:
                              type: array
                              items:
                                type: object
                            date:
                              type: number
                            events:
                              type: array
                              items:
                                type: object
                            files:
                              type: array
                              items:
                                type: object
                            from:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            id:
                              type: string
                              minLength: 1
                            labels:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  display_name:
                                    type: string
                                    minLength: 1
                                  id:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            object:
                              type: string
                              minLength: 1
                            reply_to:
                              type: array
                              items:
                                type: object
                            snippet:
                              type: string
                              minLength: 1
                            starred:
                              type: boolean
                            subject:
                              type: string
                              minLength: 1
                            thread_id:
                              type: string
                              minLength: 1
                            to:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            unread:
                              type: boolean
                        cursor:
                          type: string
                          minLength: 1
                        event:
                          type: string
                          minLength: 1
                        id:
                          type: string
                          minLength: 1
                        object:
                          type: string
                          minLength: 1
              examples:
                StreamingDeltasResponse:
                  value:
                    cursor_end: 4ekj8ktel67njbaw1c0nlvbdi
                    cursor_start: 9fboxh6t9b3ar4fwocxpwrcss
                    deltas:
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          bcc: []
                          body: '<div dir="ltr">Hi<br clear="all"><div><div dir="ltr" class="gmail_signature" data-smartmail="gmail_signature"><div dir="ltr"><span><br><div dir="ltr" style="margin-left:0pt" align="left"><table style="border:none;border-collapse:collapse"><colgroup><col width="84"><col width="540"></colgroup><tbody><tr style="height:79pt"><td style="vertical-align:top;padding:5pt 5pt 5pt 5pt;overflow:hidden"><p dir="ltr" style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a href="https://www.nylas.com/" target="_blank"><span style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span style="border:none;display:inline-block;overflow:hidden;width:70px;height:70px"><img src="https://lh6.googleusercontent.com/zJp7cuIKWhNYHc6KsuHUsfrhyCp9DKxg243bjSLP9JKi9SEX-uMtTAr5qy54Kdlr3RNkTwAEvIDHKBCjodqu8uVLLbReY47_-KtRilUatWsZRRfO2LH9ZTCykLEVBOj8iJ7XmNeX" width="70" height="70" style="margin-left:0px;margin-top:0px"></span></span></a></p></td><td style="vertical-align:top;padding:5pt 5pt 5pt 5pt;overflow:hidden"><p dir="ltr" style="line-height:1.7999999999999998;margin-top:0pt;margin-bottom:0pt"><span style="font-size:10pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;font-weight:700;vertical-align:baseline;white-space:pre-wrap">Katherine Perry</span></p><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span style="font-size:8pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Lead Technical Writer, </span><a href="https://www.nylas.com/" target="_blank"><span style="font-size:8pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Nylas</span></a></p><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span style="font-size:8pt;font-family:&quot;Source Sans Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">email@nylas.com</span></p></td></tr><tr style="height:63pt"><td colspan="2" style="vertical-align:top;padding:5pt 5pt 5pt 5pt;overflow:hidden"><p dir="ltr" style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a href="https://www.nylas.com/resources/savings-calculator-integrations/" target="_blank"><span style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span style="border:none;display:inline-block;overflow:hidden;width:306px;height:45px"><img src="https://lh3.googleusercontent.com/bTFwY25C4D9lD4GJHxsVEWr8--YG25chLhjDJb3rWpmXPw5RngwZHUWhbDracmaXL7n6mtt5JPM9egiGaFwU2bNKMrvMcctgvrHFOI7YxIzze7CTKKVJRqD8kq2hNUE2IJiPWFmL" width="306" height="45" style="margin-left:0px;margin-top:0px"></span></span></a></p></td></tr></tbody></table></div></span></div></div></div></div>'
                          cc: []
                          date: 1602001027
                          events: []
                          files: []
                          from:
                            - email: email@nylas.com
                              name: Katherine Perry
                          id: 52m5un5v1m7rjigna5agc7y35
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          object: message
                          reply_to: []
                          snippet: 'Hi Katherine PerryLead Technical Writer, Nylasemail@nylas.com'
                          starred: false
                          subject: New Message
                          thread_id: chvd75bowkhg3gfpgeeygcxbb
                          to:
                            - email: swag@nylas.com
                              name: Katherine Personal
                          unread: false
                        cursor: 8hhvivgus0fbo4qengko8c38x
                        event: create
                        id: 52m5un5v1m7rjigna5agc7y35
                        object: message
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          draft_ids: []
                          first_message_timestamp: 1602001027
                          has_attachments: false
                          id: chvd75bowkhg3gfpgeeygcxbb
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          last_message_received_timestamp: null
                          last_message_sent_timestamp: 1602001027
                          last_message_timestamp: 1602001027
                          message_ids:
                            - 52m5un5v1m7rjigna5agc7y35
                          object: thread
                          participants:
                            - email: swag@nylas.com
                              name: Katherine Personal
                            - email: email@nylas.com
                              name: Katherine Perry
                          snippet: 'Hi Katherine PerryLead Technical Writer, Nylasemail@nylas.com'
                          starred: false
                          subject: New Message
                          unread: false
                          version: 0
                        cursor: 4ekj8ktel67njbaw1c0nlvbdi
                        event: create
                        id: chvd75bowkhg3gfpgeeygcxbb
                        object: thread
      operationId: get-delta-streaming
      parameters:
        - schema:
            type: string
          in: query
          name: cursor
          required: true
          description: The data cursor from `/delta/latest_cursor`.
        - schema:
            type: string
            default: expanded
          in: query
          name: view
          description: 'This value indicates if the data expands thread and message objects in the response to include additional information, when the value is set to expanded.'
        - schema:
            type: string
            enum:
              - contact
              - file
              - message
              - event
              - draft
              - thread
              - folder
              - label
            example: contact
          in: query
          name: excluded_types
          description: A comma-separated list of object types to exclude from the returned deltas.
        - schema:
            type: string
            enum:
              - contact
              - event
              - file
              - message
              - draft
              - thread
              - folder
              - label
          in: query
          name: include_types
          description: A comma-separated list of the object types that will only be included in the returned deltas.
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
      description: |-
        Streaming deltas process real-time updates. The server connection does not close. You can use this for server-side applications that can parse data in real-time.

        Review the [Deltas documentation](# link) for more.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/deltas/steaming-delta/steaming-delta.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/deltas/steaming-delta/steaming-delta.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/deltas/steaming-delta/steaming-delta.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/deltas/steaming-delta/steaming-delta.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/deltas/steaming-delta/steaming-delta.java
      security:
        - BASIC_AUTH: []
  /job-statuses:
    get:
      summary: Return All Job Statuses
      tags:
        - Job Statuses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job-Status'
              examples:
                ReturnAllJobStatusesResponse:
                  value:
                    - account_id: eof2wrhqkl7kdwhy9hylpv9o9
                      action: create_calendar
                      created_at: 1592374298
                      id: 8e570s302fdazx9zqwiuk9jqn
                      job_status_id: 48pp6ijzrxpw9jors9ylnsxnf
                      object: calendar
                      status: successful
                    - account_id: eof2wrhqkl7kdwhy9hylpv9o9
                      action: update_calendar
                      created_at: 1592375249
                      id: 8e570s302fdazx9zqwiuk9jqn
                      job_status_id: aqghhhldmq8eyxnn14z0tlsun
                      object: calendar
                      status: successful
                    - account_id: eof2wrhqkl7kdwhy9hylpv9o9
                      action: delete_calendar
                      created_at: 1592375759
                      id: 8e570s302fdazx9zqwiuk9jqn
                      job_status_id: d38mgop88je0agkqrf03sw0sw
                      object: calendar
                      status: successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-job-statuses
      description: Return all job statuses.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/job-status/get-job-status/get-job-status.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/job-status/get-job-status/get-job-status.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/job-status/get-job-status/get-job-status.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/job-status/get-job-status/get-job-status.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/job-status/get-job-status/get-job-status.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  '/job-statuses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the job status.
    get:
      summary: Return A Job Status
      tags:
        - Job Statuses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job-Status'
              examples:
                ReturnAJobStatusResponse:
                  value:
                    account_id: eof2wrhqkl7kdwhy9hylpv9o9
                    action: update_message
                    created_at: 1592374298
                    id: 8e570s302fdazx9zqwiuk9jqn
                    job_status_id: 48pp6ijzrxpw9jors9ylnsxnf
                    object: message
                    status: successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
      operationId: get-job-statuses-id
      description: Return a job status by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source:
            $ref: code_samples/job-status/get-job-status-id/get-job-status-id.txt
        - lang: py
          label: Python SDK
          source:
            $ref: code_samples/hosted-authentication/python-get-oauth-authorize.py
        - lang: ruby
          label: Ruby SDK
          source:
            $ref: code_samples/hosted-authentication/ruby-get-oauth-authorize.rb
        - lang: js
          label: Node.js SDK
          source:
            $ref: code_samples/hosted-authentication/node-get-oauth-authorize.js
        - lang: java
          label: Java SDK
          source:
            $ref: code_samples/hosted-authentication/java-get-oauth-authorize.java
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
components:
  schemas:
    Account-Return-All:
      title: Account-Return-All
      type: object
      description: '`/a/client_id/accounts`'
      properties:
        account_id:
          type: string
          description: A reference to the parent account object (self-referential in this case.
          example: 622x1k5v1ujh55t6ucel7av4
        billing_state:
          type: string
          description: 'The billing state for the account. Values are `paid`, `cancelled`, or `deleted`.'
          enum:
            - paid
            - cancelled
            - deleted
            - free
        email:
          type: string
          description: The email address of the account.
          example: al@particletech.com
        id:
          type: string
          description: A globally unique object identifier.
          example: 622x1k5v1ujh55t6ucel7av4
        provider:
          type: string
          description: Specifies the provider that backs the account.
          example: yahoo
        sync_state:
          type: string
          description: The current sync state for the account.
          example: running
          enum:
            - running
            - invalid
            - stopped
        trial:
          type: boolean
          description: The trial state for the application.
    Folder-Object:
      title: Folder-Object
      description: ''
      type: object
      properties:
        id:
          description: Globally unique object identifier.
          type: string
          example: blrfzbz4r066ip8x1bh8k8g1y
        object:
          description: A string describing the type of object (value is "folder").
          type: string
          example: folder
        account_id:
          description: Reference to parent account object.
          type: string
          example: 79xcak1h10r1tmm5ogavx28lb
        name:
          description: |-
            Standard categories type, based on [RFC-6154](http://tools.ietf.org/html/rfc6154).
            Can be one of the following:
            * inbox
            * all
            * trash
            * archive
            * drafts
            * sent
            * spam
            * important
            * null (regular user-created folder)
          type: string
          example: inbox
        display_name:
          description: 'Localized name of folder, matching what is presented in their other mail apps. If you are displaying folders, use this instead of `name`.'
          type: string
          example: Inbox
      x-tags:
        - Folders
      x-examples: {}
    Folder-Create:
      title: Folder-Create
      type: object
      properties:
        display_name:
          description: The human-readable name for the new folder.
          type: string
          example: My Renamed Folder
    Folder-Update:
      title: Folder-Update
      type: object
      properties:
        display_name:
          description: The human-readable name for the new folder.
          type: string
          example: My Renamed Folder
        name:
          description: Specify `sent` to update this folder as the primary sent folder. This feature is supported for custom IMAP accounts only.
          type: string
          example: renamed-folder
    Error-400:
      title: Error-400
      type: object
      properties:
        message:
          description: Error Message
          type: string
          example: Error Message
        type:
          description: Error Type
          type: string
          example: Error Type
      x-examples: {}
    Native-Auth-Post:
      title: Native-Auth-Post
      required:
        - client_id
        - name
        - email_address
        - provider
      type: object
      properties:
        client_id:
          description: Your client ID from the Nylas Developer console.
          type: string
        name:
          description: The full name of the user (e.g. “John Snow”).
          type: string
        email_address:
          description: The user’s email address.
          type: string
        provider:
          description: 'The format of the settings objec is dependent upon this field. If your provider isn''t listed, use the generic settings.'
          enum:
            - gmail
            - yahoo
            - exchange
            - outlook
            - imap
            - icloud
            - hotmail
            - aol
            - office365
          type: string
        settings:
          oneOf:
            - description: Google Settings
              properties:
                google_client_id:
                  type: string
                google_client_secret:
                  type: string
                google_refresh_token:
                  type: string
            - description: Exchange Settings
              properties:
                username:
                  type: string
                password:
                  type: string
                exchange_server_host:
                  type: string
            - description: Known IMAP
              properties:
                pasword:
                  type: string
            - description: Generic IMAP
              properties:
                imap_host:
                  type: string
                imap_port:
                  type: string
                imap_username:
                  type: string
                imap_password:
                  type: string
                smtp_host:
                  type: string
                smtp_port:
                  type: string
                smtp_username:
                  type: string
                smtp_password:
                  type: string
                ssl_required:
                  type: string
            - description: Office 365
              properties:
                microsoft_client_id:
                  type: string
                microsoft_client_secret:
                  type: string
                microsoft_refresh_token:
                  type: string
                redirect_uri:
                  description: Redirect URI that the was originally used to get the refresh token.
                  type: string
            - description: Office 365 Service Accounts OAuth
              properties:
                microsoft_client_id:
                  type: string
                microsoft_client_secret:
                  type: string
                microsoft_refresh_token:
                  type: string
                redirect_uri:
                  description: Redirect URI that the was originally used to get the refresh token.
                  type: string
                service_accounts:
                  default: 'true'
                  type: string
            - description: Office 365 Service Account Password Authentication
              properties:
                username:
                  type: string
                password:
                  type: string
                service_account:
                  default: 'true'
                  type: string
            - description: G Suite Service Accounts
              properties:
                service_account_json:
                  type: object
                  properties:
                    type:
                      default: service_account
                      type: string
                    project_id:
                      type: string
                      example: metal-figure-239116
                    private_key_id:
                      type: string
                      example: 68ac9191dd3468915b4e52e0be785ba7c6873b14
                    private_key:
                      type: string
                      example: '-----BEGIN PRIVATE KEY-----\nMI...J7tF8=\n-----END PRIVATE KEY-----\n'
                    client_email:
                      type: string
                      example: test-service-account@metal-figure-239116.iam.gserviceaccount.com
                    client_id:
                      type: string
                      example: '105691998485416876281'
                    auth_uri:
                      type: string
                      example: 'https://accounts.google.com/o/oauth2/auth'
                    token_uri:
                      type: string
                      example: 'https://oauth2.googleapis.com/token'
                    auth_provider_x509_cert_url:
                      type: string
                      example: 'https://www.googleapis.com/oauth2/v1/cert'
                    client_x509_cert_url:
                      type: string
                      example: 'https://www.googleapis.com/robot/v1/metadata/x509/test-service-account%40metal-figure-239116.iam.gserviceaccount.com'
          type: object
        scopes:
          description: Any combination of supported authentication scopes. Service accounts only support calendar scopes.
          type: string
      x-examples: {}
    Account-Get:
      title: Account-Get
      type: object
      properties:
        id:
          description: A globally unique object identifier.
          type: string
          example: awa6ltos76vz5hvphkp8k17nt
        object:
          description: A string describing the type of object.
          default: account
          type: string
          example: account
        account_id:
          description: ID of the account.
          type: string
          example: awa6ltos76vz5hvphkp8k17nt
        name:
          description: 'The full name of the user, used as the default from name when sending mail.'
          type: string
          example: Dorothy Vaughan
        provider:
          description: 'Specifies the provider that backs the account. See [Supported Providers](#link) for a full list.'
          type: string
          example: gmail
        organization_unit:
          description: 'Specify either label or folder, depending on the provider capabilities. See [Label vs. Folder](#link) for more.'
          type: string
          example: label
        sync_state:
          description: 'The syncing status of the account. See the [Sync Status](#link) documentation for possible values.'
          type: string
          example: running
        linked_at:
          format: int32
          description: A Unix timestamp indicating when this account was originally connected to Nylas.
          type: integer
          example: 1470231381
        email_address:
          description: 'The canonical email address of the account. For Gmail accounts, this removes periods and plus suffixes.'
          type: string
          example: dorothy@spacetech.com
      description: '`/account`'
    Native-Auth-Token:
      title: Native-Auth-Token
      type: object
      properties:
        access_token:
          type: string
        account_id:
          type: string
        billing_state:
          type: string
        email_address:
          type: string
        id:
          type: string
        linked_at:
          type: integer
        name:
          type: string
        object:
          type: string
        organization_unit:
          type: string
        provider:
          type: string
        sync_state:
          type: string
    Application-Details-Get:
      description: ''
      type: object
      properties:
        application_name:
          type: string
          minLength: 1
          description: The name of the Nylas application.
        icon_url:
          type: string
          minLength: 1
          example: 'https://inbox-developer-resources.s3.amazonaws.com/icons/da5b3a1c-448c-11e7-872b-0625ca014fd6'
          description: Icon URL of the Nylas application.
        redirect_uris:
          type: array
          description: Array of strings. Each string is a single redirect_uri for the application.
          items:
            type: string
      required:
        - application_name
        - icon_url
        - redirect_uris
    Thread-Object:
      description: ''
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to parent account object
        draft_ids:
          type: array
          description: Array of IDs for unsent drafts in the thread. May be null or absent
          items:
            type: string
        first_message_timestamp:
          type: number
          description: Timestamp when the thread began. UNIX
        folders:
          type: array
          uniqueItems: true
          minItems: 1
          description: 'The folder location(s) of a thread, present only if the parent account''s organization_unit is folder. Note that threads can span folders, depending on the location of the thread''s messages. See the folders docs for more info.'
          items:
            type: object
            properties:
              display_name:
                type: string
                minLength: 1
              id:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
        has_attachments:
          type: boolean
          description: Indicates if the thread has files attached to it.
        id:
          type: string
          minLength: 1
          description: Globally unique object identifier
        last_message_received_timestamp:
          type: number
          description: |-
            Timestamp of the most recently received message.
            (Excludes messages sent by the account.) UNIX
        last_message_sent_timestamp:
          type: number
          description: Timestamp of the most recently sent message in the thread. UNIX
        last_message_timestamp:
          type: number
          description: Timestamp of the most recent message. UNIX
        message_ids:
          type: array
          description: 'Array of IDs for messages within the thread, sorted by their timestamps'
          items:
            type: string
        object:
          type: string
          minLength: 1
          description: A string describing the type of object (value is "thread")
          default: thread
        participants:
          type: array
          uniqueItems: true
          minItems: 1
          description: List of participant objects computed from all messages in the thread.
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
        snippet:
          type: string
          minLength: 1
          description: A shortened plain-text preview of the most recent message in the thread
        starred:
          type: boolean
          description: 'Indicates one or more messages are starred, aka flagged (mutable)'
        subject:
          type: string
          minLength: 1
          description: Subject of the first message in the thread
        unread:
          type: boolean
          description: Indicates whether the thread contains unread messages (mutable)
        version:
          type: integer
          description: |-
            Incrementing value related to thread updates.
            You can use this to compare revisions, or invalidate your local cache.
        labels:
          type: array
          description: 'A list of label objects, present only if the parent account''s organization_unit is label. These have Gmail-style semantics and can be arbitrarily added and removed from threads.'
          items:
            type: string
    Thread-PUT:
      title: Thread-PUT
      type: object
      properties:
        unread:
          type: boolean
          description: Set to `true` to mark as unread; `false` to mark as read.
        starred:
          type: boolean
          description: Set to `true` to star a thread; `false` to un-star a thread.
        folder_id:
          type: string
          description: The ID of the folder to which to move this thread.
        label_ids:
          type: array
          description: 'The IDs of the labels to apply, overwriting all previous labels on the thread.'
          items:
            type: string
    Message-PUT:
      title: Thread-PUT
      type: object
      properties:
        unread:
          type: boolean
          description: Set to `true` to mark as unread; `false` to mark as read.
        starred:
          type: boolean
          description: Set to `true` to star a thread; `false` to un-star a thread.
        folder_id:
          type: string
          description: The ID of the folder to which to move this thread.
        label_ids:
          type: array
          description: 'The IDs of the labels to apply, overwriting all previous labels on the thread.'
          items:
            type: string
    Message-Object:
      description: ''
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to a parent account object.
        bcc:
          type: array
          description: |
            An array of name+email pairs the message was bcc'd to. For received mail this is nearly always empty.
          items:
            type: object
        body:
          type: string
          minLength: 1
          description: The full HTML message body. Messages with only plain-text representations are up-converted to HTML.
        cc:
          type: array
          description: An array of name+email pairs the message was cc'd to.
          items:
            type: object
        date:
          type: number
          description: A timestamp of the date the message was received by the mail server. This may be different from the unverified Date header in raw message object. UNIX
        events:
          type: array
          description: 'An array Event objects, if message includes calendar invites.'
          items:
            type: object
        files:
          type: array
          description: 'An array of File objects, if the message includes attachments.'
          items:
            type: object
        folder:
          type: object
          description: A single folder object indicating the location of the message. This is present only if the parent account's organization_unit is folder. This property can be changed to move the message to a different folder.
          properties:
            display_name:
              type: string
              minLength: 1
            id:
              type: string
              minLength: 1
            name:
              type: string
              minLength: 1
        from:
          type: array
          uniqueItems: true
          minItems: 1
          description: 'A list of name+email pairs the message was sent from. This is usually one object, but can be many.'
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
        object:
          type: string
          minLength: 1
          description: A string describing the type of object (value is "message").
          default: message
        reply_to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name+email pairs replies should be sent to.
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
        snippet:
          type: string
          minLength: 1
          description: A shortened plain-text preview of the message body.
        starred:
          type: boolean
          description: Indicates the message is in a starred or flagged state (mutable).
        subject:
          type: string
          minLength: 1
          description: The subject line of the message.
        thread_id:
          type: string
          minLength: 1
          description: Reference to a parent thread object (all messages have a thread).
        to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name+email pairs the message was sent to.
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
              name:
                type: string
        unread:
          type: boolean
          description: Indicates the message is unread. This is the default for new incoming mail (mutable).
        labels:
          type: array
          description: A list of Label objects. This is present only if the parent account's organization_unit is label. These are Gmail-style and can be arbitrarily added and removed from messages.
          items:
            type: string
    Labels-Object:
      description: ''
      type: object
      title: ''
      properties:
        account_id:
          type: string
          minLength: 1
          example: aaz875kwuvxik6ku7pwkqp3ah
          description: Reference to parent account object.
        display_name:
          type: string
          minLength: 1
          example: keep
          description: 'Localized name of label, matching what is presented in their other mail apps. If you are displaying labels, use this instead of name.'
          default: label
        id:
          type: string
          minLength: 1
          example: eluc9ishugbda9egbmtkkc934
          description: Globally unique object identifier.
        name:
          type: string
          minLength: 1
          example: 'null'
          description: 'Standard categories type, based on [RFC-6154](http://tools.ietf.org/html/rfc6154). If null, then a user-created label.'
          enum:
            - inbox
            - all
            - trash
            - archive
            - drafts
            - sent
            - spam
            - important
            - 'null'
        object:
          type: string
          minLength: 1
          example: label
          description: A string describing the type of object
    Drafts:
      description: ''
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: A reference to the parent account object.
        bcc:
          type: array
          description: An array of name-email pairs of recipients to be bcc'd.
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
        body:
          type: string
          minLength: 1
          description: The full HTML draft body text.
        cc:
          type: array
          description: An array of name-email pairs of recipients to be cc'd.
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
        date:
          type: number
          description: 'The UNIX timestamp of the last modification of the draft. '
        events:
          type: array
          description: 'An array of event objects, if the draft includes calendar invites.'
          items:
            type: object
        files:
          type: array
          description: 'An array of file objects, if the draft includes attachments.'
          items:
            type: object
        from:
          type: array
          uniqueItems: true
          minItems: 1
          description: Array containing a single name+email pair to set as the from header.
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
        labels:
          type: array
          uniqueItems: true
          minItems: 1
          description: 'A list of label objects, present only if the parent account''s organization_unit is label. These have Gmail-style semantics and can be arbitrarily added and removed from messages.'
          items:
            type: object
            properties:
              display_name:
                type: string
                minLength: 1
              id:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
        object:
          type: string
          minLength: 1
          description: A string describing the type of object.
          default: draft
        reply_to:
          type: array
          description: An array of name-email pairs to set an alternative Reply-To header in the final sent message.
          items:
            type: object
        reply_to_message_id:
          description: 'The ID of a message to which this draft is a reply, allowing the sending API to include threading-specific headers for other mail clients.'
          type: string
        snippet:
          type: string
          minLength: 1
          description: A shortened plain-text preview of the draft body.
        starred:
          type: boolean
          description: Starred or flagged state (mutable).
        subject:
          type: string
          minLength: 1
          description: The subject line of the draft.
        thread_id:
          type: string
          minLength: 1
          description: 'A reference to the parent thread object. If this is a new draft, the thread will be empty.'
        to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name-email pairs of recipients.
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
        unread:
          type: boolean
          description: Indicates an unread state for the draft.
        version:
          type: number
          description: |-
            Incrementing value related to draft updates.
            You can use this to compare revisions or to invalidate your local cache.
        folder:
          type: object
          description: 'A single folder object indicating the location of the draft, present only if the parent account''s organization_unit is folder. Customarily this is a folder where name is drafts, but not always.'
          properties:
            display_name:
              type: string
            id:
              type: string
            name:
              type: string
    Draft-Create:
      title: Draft-Create
      type: object
      properties:
        subject:
          type: string
          description: The subject line of the draft.
          example: From Nylas
        to:
          type: array
          description: The name-email pairs of the recipients.
          items:
            type: object
            properties:
              email:
                type: string
                example: swag@nylas.com
              name:
                type: string
                example: Nylas
            required:
              - email
        cc:
          type: array
          description: The name-email pairs of the recipients to be cc’d.
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
        bcc:
          type: array
          description: The name-email pairs of the recipients to be bcc’d.
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
        from:
          type: array
          description: 'An array containing a single name and email pair, to set as the from header.'
          items:
            type: object
            properties:
              name:
                type: string
                example: you@example.com
              email:
                type: string
                example: Your Name
        reply_to:
          type: array
          description: 'An array of name and email pairs, to set an alternative Reply-To header in the final sent message. Note that not all providers support setting this in a draft.'
          items:
            type: object
            properties:
              name:
                type: string
                example: Nylas
              email:
                type: string
                example: swag@nylas.com
        reply_to_message_id:
          type: string
          description: The ID of the message that this draft is a reply to.
        body:
          type: string
          description: The full HTML draft body text.
          example: 'This email was sent using the Nylas email API. Visit https://nylas.com for details.'
        file_ids:
          type: array
          description: 'An array of IDs for the files to attach, if the draft includes attachments. Note that creating a draft will fail, if these files have not yet been uploaded.'
          items:
            type: string
    Draft-Update:
      title: Draft-Update
      type: object
      properties:
        subject:
          type: string
          description: The subject line of the draft.
          example: From Nylas
        to:
          type: array
          description: The name-email pairs of the recipients.
          items:
            type: object
            properties:
              email:
                type: string
                example: swag@nylas.com
              name:
                type: string
                example: Nylas
        cc:
          type: array
          description: The name-email pairs of the recipients to be cc’d.
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
        bcc:
          type: array
          description: The name-email pairs of the recipients to be bcc’d.
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
        from:
          type: array
          description: 'An array containing a single name and email pair, to set as the from header.'
          items:
            type: object
            properties:
              name:
                type: string
                example: you@example.com
              email:
                type: string
                example: Your Name
        reply_to:
          type: array
          description: 'An array of name and email pairs, to set an alternative Reply-To header in the final sent message. Note that not all providers support setting this in a draft.'
          items:
            type: object
            properties:
              name:
                type: string
                example: Nylas
              email:
                type: string
                example: swag@nylas.com
        reply_to_message_id:
          type: string
          description: The ID of the message that this draft is a reply to.
        body:
          type: string
          description: The full HTML draft body text.
          example: 'This email was sent using the Nylas email API. Visit https://nylas.com for details.'
        file_ids:
          type: array
          description: 'An array of IDs for the files to attach, if the draft includes attachments. Note that creating a draft will fail, if these files have not yet been uploaded.'
          items:
            type: string
        version:
          type: number
          description: Version of the draft that you are modifying
    File-Object:
      description: ''
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          example: 43jf3n4es3***
        content_type:
          type: string
          minLength: 1
          example: image/jpeg
        filename:
          type: string
          minLength: 1
          example: image.jpg
        id:
          type: string
          minLength: 1
          example: 9etjh6talp***
        object:
          type: string
          minLength: 1
          example: file
        size:
          type: number
          example: 72379
    Calendar:
      description: ''
      type: object
      title: ''
      properties:
        description:
          type: string
          description: Description of the Calendar
          example: Emailed events
        id:
          type: string
          minLength: 1
          example: 67qmz3fuk9wf***
          description: Globally unique object identifier
        name:
          type: string
          minLength: 1
          example: Calendar
          description: Name of the Calendar
        account_id:
          type: string
          minLength: 1
          example: bh1vu31mw9ap***
          description: Reference to parent account object
        object:
          type: string
          minLength: 1
          example: calendar
          description: A string describing the type of object.
          default: calendar
        read_only:
          type: boolean
          description: True if the Calendar is read only
    Calendar-Create:
      description: ''
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Name of the Calendar
          example: My New Calendar
        description:
          type: string
          minLength: 1
          description: Description of the Calendar
          example: Description of my new calendar
        location:
          type: string
          minLength: 1
          description: Geographic location of the calendar as free-form text
          example: Location description
        timezone:
          type: string
          minLength: 1
          description: '[IANA time zone database](https://en.wikipedia.org/wiki/Tz_database) formatted string (e.g. America/New_York).'
          example: America/Los_Angeles
      required:
        - name
        - description
        - location
        - timezone
    Calendar-Create-Update-Response:
      description: ''
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to parent account object
          example: eof2wrhqkl7kdwhy9hylpv9o9
        description:
          type: string
          minLength: 1
          description: Description of the Calendar
          example: Description of my new calendar
        id:
          type: string
          minLength: 1
          description: Globally unique object identifier
          example: 8e570s302fdazx9zqwiuk9jqn
        is_primary:
          type: boolean
          description: A boolean denoting whether this is the primary calendar associated with a account
        job_status_id:
          type: string
          minLength: 1
          description: Job status ID for the calendar modification.
          example: 48pp6ijzrxpw9jors9ylnsxnf
        location:
          type: string
          minLength: 1
          description: Geographic location of the calendar as free-form text
          example: Location description
        name:
          type: string
          minLength: 1
          description: Name of the Calendar
          example: My New Calendar
        object:
          type: string
          minLength: 1
          description: A string describing the type of object
          default: calendar
          example: calendar
        read_only:
          type: boolean
          description: True if the Calendar is read only
        timezone:
          type: string
          minLength: 1
          description: '[IANA time zone database](https://en.wikipedia.org/wiki/Tz_database) formatted string (e.g. America/New_York).'
          example: America/Los_Angeles
    Events:
      description: ''
      type: object
      x-examples: {}
      properties:
        account_id:
          type: string
          minLength: 1
          description: A reference to the parent account object.
          example: aaz875kwuvxik6ku7pwkqp3ah
        busy:
          type: boolean
          description: 'On shared or public calendars, indicates whether to show this event''s time block as available. (Also called transparency in some systems.)'
        calendar_id:
          type: string
          minLength: 1
          description: A reference to the parent calendar object.
          example: 947kpa7ih22bfkeujpkfqn5bf
        description:
          type: string
          description: 'The description of the event, which may contain more details or an agenda.'
          maxLength: 8192
          example: Coffee meeting
          minLength: 0
        ical_uid:
          nullable: true
          type: string
          minLength: 1
          description: 'Unique identifier as defined in [RFC5545](https://tools.ietf.org/html/rfc5545#section-3.8.4.7). It is used to uniquely identify events across calendaring systems. '
          example: 5i2voruhvks4pbt5ktngk28bc9@google.com
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
          example: 4t0kwb4qb6xr0pfzzook70nd8
        location:
          nullable: true
          type: string
          description: 'A location, such as a physical address or meeting room name.'
        message_id: {}
        object:
          type: string
          minLength: 1
          description: 'A string describing the type of object '
          default: event
          example: event
        owner:
          type: string
          minLength: 1
          description: 'The owner of the event, usually specified with their email or name and email.'
          example: <some_email@email.com>
        participants:
          type: array
          uniqueItems: true
          minItems: 1
          description: 'An array of other participants invited to the event. Keys are `email`, `name`, `status`. Participants may also be rooms or resources.'
          items:
            type: object
            properties:
              comment:
                nullable: true
                type: string
                description: A comment by the participant.
              email:
                type: string
                minLength: 1
                description: The participant's email address.
                example: email@email.com
              name:
                nullable: true
                type: string
              status:
                type: string
                minLength: 1
                description: The participant's attendance status.
                default: noreply
                enum:
                  - 'yes'
                  - maybe
                  - 'no'
                  - noreply
                example: noreply
        read_only:
          type: boolean
          description: Indicates whether the event can be modified.
        title:
          type: string
          minLength: 1
          description: The title of the event.
          maxLength: 1024
          example: 'Remote Event: Group Yoga Class'
        when:
          description: 'One of four sub-objects corresponding to the time and duration of an event: time, timespan, date, or datespan.'
          anyOf:
            - properties:
                object:
                  type: string
                  default: time
                  example: time
                  description: A string describing the type of object. **Read Only**
                time:
                  type: integer
                  example: 1408875644
                  description: A UNIX timestamp (UTC).
            - properties:
                timespan:
                  type: string
                  default: timespan
                  example: timespan
                  description: A string describing the type of object. **Read Only**
                start_time:
                  type: string
                  example: '1409594400'
                  description: The start time of the event. UNIX timestamp
                end_time:
                  type: string
                  example: '1409598000'
                  description: The end time of the event. UNIX timestamp
            - properties:
                object:
                  type: string
                  example: date
                  description: 'A string describing the type of object. '
                  default: date
                date:
                  type: string
                  example: '1912-06-23'
                  description: 'Date of occurance in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) format.'
            - properties:
                datespan:
                  type: string
                  description: A string describing the type of object
                  default: datespan
                  example: datespan
                start_date:
                  type: string
                  description: The start date in ISO 8601 format.
                  example: '1815-12-10'
                end_date:
                  type: string
                  description: The end date in ISO 8601 format.
                  example: '1852-11-27'
          type: object
        status:
          type: string
          description: 'One of the following values: confirmed, tentative, or cancelled.'
          enum:
            - confirmed
            - tentative
            - cancelled
          example: confirmed
    Event-Create-Update:
      description: ''
      type: object
      x-examples: {}
      properties:
        title:
          type: string
          minLength: 1
          description: Creates an event with the specified title. This value is usually short.
          example: Birthday Party
        calendar_id:
          type: string
          minLength: 1
          description: Creates an event in the specified calendar ID. See Calendar for more info.
          example: 947kpa7ih22bfkeujpkfqn5bu
        status:
          type: string
          minLength: 1
          example: confirmed
          enum:
            - status
            - confirmed
            - cancelled
        busy:
          type: boolean
          description: Creates an event with the specified busy state. This value determines whether to show this event’s time block as available on shared or public calendars. This is also called transparency in some systems.
        read_only:
          type: boolean
        participants:
          type: array
          uniqueItems: true
          minItems: 1
          description: 'Creates an event with the specified participants. '
          items:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                example: Aristotle
              email:
                type: string
                minLength: 1
                example: aristotle@nylas.com
              status:
                type: string
                enum:
                  - 'yes'
                  - 'no'
                  - maybe
                  - noreply
                description: |-
                  While it's possible to set participant statuses during event creation, this status may not be reflected in the invitee's calendar because it can be blocked due to calendar permissions settings, and is not supported for invitees with Exchange accounts.

                  In most cases, the default value of noreply is the best option.
              comment:
                type: string
            required:
              - email
              - status
        description:
          type: string
          minLength: 1
          description: Creates an event with the specified description. This value may contain more details about an event or an agenda.
          example: Come ready to skate
        when:
          description: 'One of four sub-objects corresponding to the time and duration of an event: time, timespan, date, or datespan.'
          oneOf:
            - properties:
                object:
                  type: string
                  default: time
                  example: time
                  description: A string describing the type of object. **Read Only**
                time:
                  type: integer
                  example: 1408875644
                  description: A UNIX timestamp (UTC).
            - properties:
                timespan:
                  type: string
                  default: timespan
                  example: timespan
                  description: A string describing the type of object. **Read Only**
                start_time:
                  type: string
                  example: '1409594400'
                  description: The start time of the event. UNIX timestamp
                end_time:
                  type: string
                  example: '1409598000'
                  description: The end time of the event. UNIX timestamp
            - properties:
                object:
                  type: string
                  example: date
                  description: 'A string describing the type of object. '
                  default: date
                date:
                  type: string
                  example: '1912-06-23'
                  description: 'Date of occurance in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) format.'
            - properties:
                datespan:
                  type: string
                  description: A string describing the type of object
                  default: datespan
                  example: datespan
                start_date:
                  type: string
                  description: The start date in ISO 8601 format.
                  example: '1815-12-10'
                end_date:
                  type: string
                  description: The end date in ISO 8601 format.
                  example: '1852-11-27'
          type: object
        location:
          type: string
          description: Creates an event with the specified location. For example a physical address or meeting room name.
          example: Roller Rink
        recurrence:
          type: object
          properties:
            rrule:
              type: array
              description: 'An array of RRULE and EXDATE strings. See [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.8.5) for more details. Please note that EXRULE and RDATE strings are not supported for POST or PUT requests at this time. [RRULe Tool](http://jakubroztocil.github.io/rrule/)  is helpful in understanding the RRULE spec.'
              items:
                type: string
                example: 'RRULE:FREQ=WEEKLY;BYDAY=MO'
            timezone:
              type: string
              description: '[IANA time zone](https://en.wikipedia.org/wiki/Tz_database) database formatted string.'
              example: America/New_York
      required:
        - calendar_id
        - when
    Room-Resources:
      description: ''
      type: object
      properties:
        object:
          type: string
          minLength: 1
          example: room_resource
          default: room_resource
          description: A string describing the type of object
        email:
          type: string
          minLength: 1
          example: training-room-1A@google.com
          description: The email address of the resource.
        name:
          type: string
          minLength: 1
          example: Training Room 1A
          description: The name of the resource.
        capacity:
          type: string
          minLength: 1
          example: '8'
          description: The capacity of the room set the organization admin.
        building:
          type: string
          minLength: 1
          description: The building identifier set by the organization admin.
        floor_name:
          type: string
          nullable: true
          minLength: 1
          example: '7'
          description: 'Microsoft uses two fields to identify floors, floor name, and floor label. We use floor label to populate this field. GSuite will return the floor name.'
        floor_number:
          type: string
          description: Microsoft uses floor number to popular this field. GSuite will always return null.
          example: '7'
    Contact:
      description: ''
      type: object
      x-examples: {}
      properties:
        account_id:
          type: string
          minLength: 1
          description: A reference to the parent account object.
          example: x2x2x2x2x2x2x2x2x2x2x2
        birthday:
          type: string
          minLength: 1
          description: The birthday of contact in the format `YYYY-MM-DD`.
          example: '1960-12-31'
        company_name:
          type: string
          minLength: 1
          description: The name of the company
          example: Nylas
        emails:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
                description: The email address. This is a free-form string.
                example: john@doe.com
              type:
                type: string
                minLength: 1
                description: The type of the email address.
                enum:
                  - work
                  - personal
                example: work
        given_name:
          type: string
          minLength: 1
          description: The given name of the contact.
          example: John
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
          example: z3z3z3z3z3z3z3z3z3z3z3
        im_addresses:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              type:
                type: string
                minLength: 1
                description: The type of the IM address.
                enum:
                  - gtalk
                  - aim
                  - yahoo
                  - lync
                  - skype
                  - qq
                  - msn
                  - icc
                  - jabber
                example: aim
              im_address:
                type: string
                minLength: 1
                description: The IM address. This is a free-form string.
                example: myaimaddress
        job_title:
          type: string
          minLength: 1
          description: The job title of the contact.
          example: Software Engineer
        manager_name:
          type: string
          minLength: 1
          description: The name of the manager for the contact.
          example: Bill the manager
        middle_name:
          type: string
          minLength: 1
          description: The middle name of the contact.
          example: Jacob
        nickname:
          type: string
          minLength: 1
          description: The nickname of the contact.
          example: JD
        notes:
          type: string
          minLength: 1
          description: Notes about the contact. This field has limited support.
          example: Loves ramen
        object:
          type: string
          minLength: 1
          description: 'A string describing the type of object '
          default: contact
          example: contact
        office_location:
          type: string
          minLength: 1
          description: The location of the office for the contact. This is a free-form field.
          example: 123 Main Street
        phone_numbers:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              number:
                type: string
                minLength: 1
                example: 1 800 123 4567
              type:
                type: string
                minLength: 1
                description: The type of phone number.
                enum:
                  - business
                  - home
                  - mobile
                  - page
                  - business_fax
                  - home_fax
                  - organization_main
                  - assistant
                  - radio
                  - other
                example: business
        physical_addresses:
          type: array
          items:
            type: object
            properties:
              format:
                type: string
                description: The format of the address. The value can be structured or unstructured. Currently only structured addresses are supported in PUT or POST calls to /contacts.
              type:
                type: string
                description: 'The type of the address. The value can be work, home or other.'
                enum:
                  - work
                  - home
                  - other
              street_address:
                type: string
                description: 'The street address, which includes a house number and street name.'
              city:
                type: string
                description: The city of the address.
              postal_code:
                type: string
                description: The postal code of the address.
              state:
                type: string
                description: The state of the address. This can be a full name or the state abbreviation.
              country:
                type: string
                description: The country of the address. This can be a full name or the country abbreviation.
        picture_url:
          type: string
          minLength: 1
          description: 'The URL of endpoint for the contact''s picture. See /contacts/{id}/picture for more.'
          example: 'https://api.nylas.com/contacts/427abc427abc427abc/picture'
        suffix:
          type: string
          minLength: 1
          description: 'The suffix of the contact. (e.g. Jr., Sr., III).'
        surname:
          type: string
          minLength: 1
          description: The surname of the contact.
        web_pages:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: |-
                  Type of Web Page. The default values are profile, blog, homepage or work.
                  You can add in a custom type when creating a type and Nylas will read custom types from incoming contact data.
                enum:
                  - profile
                  - blog
                  - homepage
                  - work
              url:
                type: string
                description: The web page url. This is a free-form string.
        groups:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              id:
                type: string
                minLength: 1
                description: A globally unique object identifier.
              object:
                type: string
                minLength: 1
                description: A string describing the type of object.
                default: contact_group
              account_id:
                type: string
                minLength: 1
                description: A reference to the parent account object.
              name:
                type: string
                minLength: 1
                description: The name of the Contact Group.
              path:
                type: string
                minLength: 1
                description: 'A fully qualified path of the Contact Group, if nesting is permitted by the account''s provider.'
    CreateAContact:
      description: ''
      type: object
      x-examples: {}
      properties:
        birthday:
          type: string
          minLength: 1
          description: The birthday of contact in the format `YYYY-MM-DD`.
          example: '1960-12-31'
        company_name:
          type: string
          minLength: 1
          description: The name of the company
          example: Nylas
        emails:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
                description: The email address. This is a free-form string.
                example: john@doe.com
              type:
                type: string
                minLength: 1
                description: The type of the email address.
                enum:
                  - work
                  - personal
                example: work
        given_name:
          type: string
          minLength: 1
          description: The given name of the contact.
          example: John
        im_addresses:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              type:
                type: string
                minLength: 1
                description: The type of the IM address.
                enum:
                  - gtalk
                  - aim
                  - yahoo
                  - lync
                  - skype
                  - qq
                  - msn
                  - icc
                  - jabber
                example: aim
              im_address:
                type: string
                minLength: 1
                description: The IM address. This is a free-form string.
                example: myaimaddress
        job_title:
          type: string
          minLength: 1
          description: The job title of the contact.
          example: Software Engineer
        manager_name:
          type: string
          minLength: 1
          description: The name of the manager for the contact.
          example: Bill the manager
        middle_name:
          type: string
          minLength: 1
          description: The middle name of the contact.
          example: Jacob
        nickname:
          type: string
          minLength: 1
          description: The nickname of the contact.
          example: JD
        notes:
          type: string
          minLength: 1
          description: Notes about the contact. This field has limited support.
          example: Loves ramen
        office_location:
          type: string
          minLength: 1
          description: The location of the office for the contact. This is a free-form field.
          example: 123 Main Street
        phone_numbers:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              number:
                type: string
                minLength: 1
                example: 1 800 123 4567
              type:
                type: string
                minLength: 1
                description: The type of phone number.
                enum:
                  - business
                  - home
                  - mobile
                  - page
                  - business_fax
                  - home_fax
                  - organization_main
                  - assistant
                  - radio
                  - other
                example: business
        physical_addresses:
          type: array
          items:
            type: object
            properties:
              format:
                type: string
                description: The format of the address. The value can be structured or unstructured. Currently only structured addresses are supported in PUT or POST calls to /contacts.
              type:
                type: string
                description: 'The type of the address. The value can be work, home or other.'
                enum:
                  - work
                  - home
                  - other
              street_address:
                type: string
                description: 'The street address, which includes a house number and street name.'
              city:
                type: string
                description: The city of the address.
              postal_code:
                type: string
                description: The postal code of the address.
              state:
                type: string
                description: The state of the address. This can be a full name or the state abbreviation.
              country:
                type: string
                description: The country of the address. This can be a full name or the country abbreviation.
        suffix:
          type: string
          minLength: 1
          description: 'The suffix of the contact. (e.g. Jr., Sr., III).'
        surname:
          type: string
          minLength: 1
          description: The surname of the contact.
        web_pages:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: |-
                  Type of Web Page. The default values are profile, blog, homepage or work.
                  You can add in a custom type when creating a type and Nylas will read custom types from incoming contact data.
                enum:
                  - profile
                  - blog
                  - homepage
                  - work
              url:
                type: string
                description: The web page url. This is a free-form string.
        group:
          type: string
          description: Creates a new contact associated to the specified contact group id.
    Search-Messages:
      type: array
      description: ''
      minItems: 1
      uniqueItems: true
      title: Search Messages
      x-examples: {}
      items:
        type: object
        properties:
          account_id:
            type: string
            minLength: 1
            example: 43jf3n4es3***
          bcc:
            type: array
            items:
              type: object
          body:
            type: string
            minLength: 1
            example: 'Hello, how are you?'
          cc:
            type: array
            items:
              type: object
          date:
            type: number
            example: 1559770299
          events:
            type: array
            items:
              type: object
          files:
            type: array
            items:
              type: object
          folder:
            type: object
            properties:
              display_name:
                type: string
                minLength: 1
                example: Draft
              id:
                type: string
                minLength: 1
                example: eeangfw9vm5***
              name:
                type: string
                minLength: 1
                example: drafts
          from:
            type: array
            uniqueItems: true
            minItems: 1
            items:
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                  example: swag@nylas.com
                name:
                  type: string
                  minLength: 1
                  example: Nylas Swag
          id:
            type: string
            minLength: 1
            example: 27hvuc1w2v85***
          object:
            type: string
            minLength: 1
            example: draft
          reply_to:
            type: array
            items:
              type: object
          reply_to_message_id: {}
          snippet:
            type: string
            minLength: 1
          starred:
            type: boolean
          subject:
            type: string
            minLength: 1
          thread_id:
            type: string
            minLength: 1
          to:
            type: array
            uniqueItems: true
            minItems: 1
            items:
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
              required:
                - email
                - name
          unread:
            type: boolean
          version:
            type: number
        required:
          - snippet
          - starred
          - subject
          - thread_id
          - to
          - unread
          - version
    Search-Threads:
      type: array
      description: ''
      minItems: 1
      uniqueItems: true
      items:
        type: object
        properties:
          account_id:
            type: string
            minLength: 1
          draft_ids:
            type: array
            items:
              type: string
          first_message_timestamp:
            type: number
          folders:
            type: array
            uniqueItems: true
            minItems: 1
            items:
              type: object
              properties:
                display_name:
                  type: string
                  minLength: 1
                id:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
          has_attachments:
            type: boolean
          id:
            type: string
            minLength: 1
          last_message_received_timestamp: {}
          last_message_sent_timestamp: {}
          last_message_timestamp:
            type: number
          message_ids:
            type: array
            items:
              type: object
          object:
            type: string
            minLength: 1
          participants:
            type: array
            items:
              type: object
          snippet:
            type: string
          starred:
            type: boolean
          subject:
            type: string
            minLength: 1
          unread:
            type: boolean
          version:
            type: number
    Webhooks-Object:
      description: ''
      type: object
      title: ''
      properties:
        application_id:
          type: string
          minLength: 1
          description: A reference to the parent application object.
          example: 8eejdhpc5dv04w6ea8lzlxtkt
        callback_url:
          type: string
          minLength: 1
          description: The URL where notifications are posted.
          example: 'https://97a5db5e7c59.ngrok.io/webhook'
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
          example: 7b5y8f25p344jy8yem6v5jir
        state:
          type: string
          minLength: 1
          description: The state of the webhook.
          enum:
            - active
            - inactive
            - failing
            - failed
          example: active
        triggers:
          type: array
          description: 'An array containing a set of triggers, describing the notifications this webhook should receive.'
          items:
            type: string
            example: message.created
        version:
          type: string
          minLength: 1
          example: '2.0'
          description: A string describing the the webhook version.
    Job-Status:
      description: ''
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to parent account object.
          example: eof2wrhqkl7kdwhy9hylpv9o9
        action:
          type: string
          minLength: 1
          description: Action performed on a given object
          enum:
            - create_calendar
            - update_calendar
            - delete_calendar
            - create_contact
            - update_contact
            - delete_contact
            - create_folder
            - update_folder
            - delete_folder
            - create_label
            - update_label
            - create_event
            - update_event
            - delete_event
            - update_message
          example: update_message
        created_at:
          type: number
          description: 'Timestamp indicating when the job status was created. UNIX timestamp '
          example: 1592374298
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
          example: 8e570s302fdazx9zqwiuk9jqn
        job_status_id:
          type: string
          minLength: 1
          description: Globally unique id representing the job.
          example: 48pp6ijzrxpw9jors9ylnsxnf
        object:
          type: string
          minLength: 1
          description: A string describing the type of object this job status refers to.
          enum:
            - message
            - calendar
            - folder
            - event
            - contact
            - label
          example: message
        status:
          type: string
          minLength: 1
          description: 'A string indicating the job status. Can be successful, pending, or failed.'
          enum:
            - pending
            - failed
            - successful
          example: successful
  securitySchemes:
    BASIC_AUTH:
      scheme: basic
      type: http
    ACCESS_TOKEN:
      scheme: bearer
      type: http
  responses: {}
  parameters: {}
tags:
  - name: Folders
    description: |-
      Folders behave like normal IMAP or filesystem folders. A Message can only exist within one folder at a time, but a Thread with many messages may span several folders.

      Folders are only supported on accounts for which `organization_unit` is folder. You can check if an account supports labels by looking at the organization_unit property on the Account object.

      ## Nested Folders

      IMAP has very limited support for nested folders. It encodes a folder's path in its name. For example, the folder Accounting/Taxes will actually be named Accounting.Taxes or even INBOX.Accounting.Taxes depending on your IMAP server. To complicate things, different IMAP servers use different path separators. For example, Taxes.Accounting on server A may be Taxes\Accounting on server B.

      The Nylas API handles nested IMAP folders transparently. Creating a Taxes/Invoices folder using the API will create a folder with the right path separators. e.g: Depending on your server: INBOX.Taxes.Invoices or Taxes/Invoices.

      ## The Folders Object

      | Attribute  | Type | Description  |
      |----:|---|:----|
      | `id` | string | Globally unique object identifier. |
      | `object` | string | A string describing the type of object (value is "folder").
      | `account_id` | string | Reference to parent account object. |
      | `name` | string | Standard categories type, based on [RFC-6154](http://tools.ietf.org/html/rfc6154). <br>Can be one of the following: <ul><li>inbox</li><li>all</li><li>trash</li><li>archive</li><li>drafts</li><li>sent</li><li>spam</li><li>important</li><li>null (regular user-created folder)</li></ul>
      | `display_name`| string | Localized name of folder, matching what is presented in their other mail apps. If you are displaying folders, use this instead of `name`. |
  - name: Hosted Authentication
  - name: Native Authentication
  - name: Accounts
  - name: Threads
    description: |-
      Threads are first-class objects allowing you to build beautiful mail
      applications that behave the way users have come to expect. You can
      perform actions like archiving or deleting can be performed on threads or
      individual messages.


      Nylas threads messages together differently depending on the provider. On
      Gmail and Microsoft Exchange accounts, messages are threaded together as
      close as possible to the representation in those environments. For all
      other providers, messages are threaded using a custom[ JWZ-inspired
      algorithm](https://github.com/nylas/sync-engine/blob/master/inbox/util/threading.py#L11). 


      To load all [messages](# link) for a given thread, you should instead use
      the messages endpoint with a `thread_id` filter parameter.


      ## The Thread Object


      |Attribute|Type|Description|
      |--- |--- |--- |
      |id|string|Globally unique object identifier|
      |object|string|A string describing the type of object (value is "thread")|
      |account_id|string|Reference to parent account object|
      |subject|string|Subject of the first message in the thread|
      |unread|boolean|Indicates whether the thread contains unread messages
      (mutable)|
      |starred|boolean|Indicates one or more messages are starred, aka flagged
      (mutable)|
      |last_message_timestamp|unix timestamp|Timestamp of the most recent
      message|
      |last_message_received_timestamp|unix timestamp|Timestamp of the most
      recently received message.(Excludes messages sent by the account.)|
      |last_message_sent_timestamp|unix timestamp|Timestamp of the most recently
      sent message in the thread|
      |first_message_timestamp|unix timestamp|Timestamp when the thread began|
      |participants|array|List of participant objects computed from all messages
      in the thread.|
      |snippet|string|A shortened plain-text preview of the most recent message
      in the thread|
      |message_ids|array|Array of IDs for messages within the thread, sorted by
      their timestamps|
      |draft_ids|array|Array of IDs for unsent drafts in the thread. May be null
      or absent|
      |version|integer|Incrementing value related to thread updates.You can use
      this to compare revisions, or invalidate your local cache.|
      |folders|array|The folder location(s) of a thread,  present only if the
      parent account's organization_unit is folder. Note that threads can span
      folders, depending on the location of the thread's messages. See the
      folders  docs for more info.|
      |labels|array|A list of label objects, present only if the parent
      account's organization_unit is label. These have Gmail-style semantics and
      can be arbitrarily added and removed from threads.|
      |has_attachments|boolean|Indicates if the thread has files attached to
      it.|
  - name: Messages
  - name: Labels
  - name: Room Resources
  - name: Files
  - name: Account Management
  - name: Sending
  - name: Contacts
  - name: Search
  - name: Calendar
  - name: Events
  - name: Webhooks
  - name: Deltas
  - name: Job Statuses
  - name: Drafts
    description: |-
      An account corresponds to an email address, mailbox, and optionally a calendar. When connecting to the Nylas API, a specific access token gives you access to a specific account’s data.

      ## The Accounts Object
      | attribute | type  | description  |
      |----:|----|:----|
      | `id` | string | A globally unique object identifier. |
      | `object` | string | A string describing the type of object (value is `"account"`).
      | `account_id` | string | A reference to the parent account object (self-referential in this case). |
      | `name` | string | The full name of the user, used as the default `"from"` name when sending mail. |
      | `email_address` | string | The canonical email address of the account. For Gmail accounts, this removes periods and plus suffixes. |
      | `provider` | string | Specifies the provider that backs the account (e.g. `gmail` or `eas`). See [Supported Providers](ref:supported-providers) for a full list. |
      | `organization_unit` | string | Specify either `"label"` or `"folder"`, depending on the provider capabilities. |
      | `sync_state` | string | The syncing status of the account. See the [Sync status](ref:account-sync-status) documentation for possible values. |
      | `linked_at` | int32 | A Unix timestamp indicating when this account was originally connected to Nylas.
security: []
